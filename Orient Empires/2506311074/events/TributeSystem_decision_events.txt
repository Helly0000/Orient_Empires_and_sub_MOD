namespace = petition_suzerain

# 0001 -> liege decides whether or not to hear petition
# 0009 -> vassal learns that liege refuses to hear petition (end)
# 0101 -> liege hears petition, makes a decision (End Wars petition)
# 0201 -> liege grants petition
# 0205 -> liege asks for something in return
# 0209 -> liege refuses petition (end)
# 0301 -> vassal agrees to terms 
# 0305 -> vassal offers counter-proposal?
# 0309 -> vassal refuses counterproposal (end)
# 0401 -> player vassal skillcheck opportunity
# 0501 -> target title holder refusal option
# 0601 -> petition invalidated info

# Event fired on arrival to liege's court that checks if your selected petition is still valid
petition_suzerain.9000 = {
	hidden = yes
	immediate = {
		save_scope_as = petition_vassal
		var:my_suzerain = { save_scope_as = petition_liege }
		if = {
			limit = {
				var:my_suzerain = {
					OR = {
						is_imprisoned = yes 
						is_alive = no
					}
				}
			}
			send_interface_toast = {
				title = petition_liege_costs_refunded
				left_icon = root 
				remove_decision_cooldown = petition_liege_decision
				# refund prestige cost
				add_prestige = standard_activity_cost
			}
			trigger_event = petition_suzerain.0601
		}
		else_if = { # Double check that the selection made when taking the decision is still valid
			limit = {
				trigger_if = { # Pay Debt
					limit = { var:petition_type = flag:pay_debt }
					gold <= -100
					var:my_suzerain.gold >= petitioner_debt_positivization_root_value
				}
				trigger_if = { # War Aid
					limit = { var:petition_type = flag:war_aid }
					# Must not be in any war involving liege
					petition_liege_war_aid_share_trigger = yes
					# Losing an external war
					petition_liege_war_aid_trigger = yes
				}
				trigger_if = { # Bailiffs
					limit = { var:petition_type = flag:county_control }
					any_held_title = { petition_liege_county_control_trigger = yes }
				}
				trigger_if = { # Convert
					limit = { var:petition_type = flag:county_convert }
					faith = var:my_suzerain.faith
					any_held_title = { petition_liege_county_convert_trigger = yes }
				}
				trigger_if = { # Opinion
					limit = { var:petition_type = flag:county_opinion }
					any_held_title = { petition_liege_county_opinion_trigger = yes }
				}
				trigger_if = { # Fortify
					limit = { var:petition_type = flag:fortify_border }
					any_held_title = { petition_liege_fortify_border_trigger = yes }
					NOT = { var:my_suzerain.gold < 0 }
				}
				trigger_if = { # Construct City
					limit = { var:petition_type = flag:construct_city }
					any_held_title = { petition_liege_construct_city_trigger = yes }
					var:my_suzerain.gold > main_building_tier_1_cost
				}
				trigger_if = { # Construct Temple
					limit = { var:petition_type = flag:construct_temple }
					any_held_title = { petition_liege_construct_temple_trigger = yes }
					var:my_suzerain.gold > main_building_tier_1_cost
				}
				trigger_if = { # Development
					limit = { var:petition_type = flag:development }
					var:my_suzerain.capital_province.county.development_level >= petitioner_development_difference_decision_value
				}
			}
			switch = {
				trigger = scope:petition_vassal.var:petition_type
				flag:pay_debt = {} #Debt
				flag:war_aid = { #War Aid
					ordered_character_war = {
						limit = {
							is_war_leader = scope:petition_vassal
							trigger_if = {
								limit = {
									scope:petition_vassal = { is_attacker_in_war = prev }
								}
								attacker_war_score < -25
							}
							trigger_else = { defender_war_score < -25 }
						}
						order_by = war_days
						if = {
							limit = { primary_attacker = scope:petition_vassal }
							primary_defender = { save_scope_as = second_party }
						}
						else = {
							primary_attacker = { save_scope_as = second_party }
						}
						save_scope_as = petition_war
					}
				}
				flag:county_control = { #Control
					every_held_title = {
						limit = { petition_liege_county_control_trigger = yes }
						add_to_list = petition_liege_county_control_list
					}
					ordered_in_list = {
						list = petition_liege_county_control_list
						order_by = development_level
						save_scope_as = petition_county_example
					}
				}
				flag:county_convert = { #Convert
					every_held_title = {
						limit = { petition_liege_county_convert_trigger = yes }
						add_to_list = petition_liege_county_convert_list
					}
					ordered_in_list = {
						list = petition_liege_county_convert_list
						order_by = development_level
						save_scope_as = petition_county_example
					}
				}
				flag:county_opinion = { #Opinion
					every_held_title = {
						limit = { petition_liege_county_opinion_trigger = yes }
						add_to_list = petition_liege_county_opinion_list
					}
					ordered_in_list = {
						list = petition_liege_county_opinion_list
						order_by = {
							value = 0
							add = county_opinion
						}
						save_scope_as = petition_county_example
					}
				}
				flag:fortify_border = { #Fortify
					every_held_title = {
						limit = { petition_liege_fortify_border_trigger = yes }
						add_to_list = petition_liege_fortify_border_list
					}
					ordered_in_list = {
						list = petition_liege_fortify_border_list
						order_by = development_level
						save_scope_as = petition_county_example
						ordered_title_to_title_neighboring_county = {
							limit = {
								NOT = { holder.top_liege = scope:petition_vassal.top_liege }
							}
							order_by = holder.top_liege.max_military_strength
							holder.top_liege = { save_scope_as = second_party }
						}
					}
				}
				flag:construct_city = { #Construct City
					random_held_title = {
						limit = { petition_liege_construct_city_trigger = yes }
						weight = {
							modifier = {
								factor = 100
								county_has_no_city_trigger = yes
							}
							modifier = { factor = development_level }
						}
						save_scope_as = petition_construct_county
						random_county_province = {
							limit = { province_has_no_holding_trigger = yes }
							save_scope_as = petition_construct
						}
					}
				}
				flag:construct_temple = { #Construct Temple
					random_held_title = {
						limit = { petition_liege_construct_temple_trigger = yes }
						weight = {
							modifier = {
								factor = 100
								county_has_no_church_trigger = yes
							}
							modifier = { factor = development_level }
						}
						save_scope_as = petition_construct_county
						random_county_province = {
							limit = { province_has_no_holding_trigger = yes }
							save_scope_as = petition_construct
						}
					}
				}
				flag:development = { # Development
					capital_province.county = {
						save_scope_as = petition_county_example 
					}
				}
			}
			scope:petition_liege = { trigger_event = petition_suzerain.0001 }
			scope:petition_vassal = {
				trigger_event = {
					on_action = petition_suzerain_ghosted
					days = 30
				}
			}
		}
		else = {
			# Notify the vassal that their prev petition is invalidated and that they are moving to a fallback scenario
			scope:petition_vassal = {
				trigger_event = petition_suzerain.9001
			}
		}
		current_travel_plan ?= {
			delay_travel_plan = { days = 90 }
		}
	}
}

# Fallback event if your selected petition is not longer valid
petition_suzerain.9001 = {
	type = character_event 
	title = petition_liege.9001.t
	desc = petition_liege.9001.desc
	theme = realm

	left_portrait = {
		character = root 
		animation = personality_rational
	}
	right_portrait = {
		character = scope:petition_liege
		animation = personality_honorable
	}

	immediate = {
		# Find out which petitions might still be valid 
		if = { # Pay Debt
			limit = {
				NOT = { var:petition_type = flag:pay_debt }
				gold <= -100
				var:my_suzerain.gold >= petitioner_debt_positivization_root_value
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:pay_debt
			}
		}
		if = { # War Aid
			limit = {
				NOT =  { var:petition_type = flag:war_aid }
				# Must not be in any war involving liege
				petition_liege_war_aid_share_trigger = yes
				# Losing an external war
				petition_liege_war_aid_trigger = yes
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:war_aid
			}
		}
		if = { # Bailiffs
			limit = {
				NOT = { var:petition_type = flag:county_control }
				any_held_title = { petition_liege_county_control_trigger = yes }
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:county_control
			}
		}
		if = { # Convert
			limit = {
				NOT = { var:petition_type = flag:county_convert }
				faith = var:my_suzerain.faith
				any_held_title = { petition_liege_county_convert_trigger = yes }
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:county_convert
			}
		}
		if = { # Opinion
			limit = { 
				NOT = { var:petition_type = flag:county_opinion }
				any_held_title = { petition_liege_county_opinion_trigger = yes }
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:county_opinion
			}
		}
		if = { # Fortify
			limit = { 
				NOT = { var:petition_type = flag:fortify_border }
				any_held_title = { petition_liege_fortify_border_trigger = yes }
				NOT = { var:my_suzerain.gold < 0 }
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:fortify_border
			}
		}
		if = { # Construct City
			limit = { 
				NOT = { var:petition_type = flag:construct_city }
				any_held_title = { petition_liege_construct_city_trigger = yes }
				var:my_suzerain.gold > main_building_tier_1_cost
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:construct_city
			}
		}
		if = { # Construct Temple
			limit = { 
				NOT = { var:petition_type = flag:construct_temple }
				any_held_title = { petition_liege_construct_temple_trigger = yes }
				var:my_suzerain.gold > main_building_tier_1_cost
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:construct_temple
			}
		}
		if = { # Development
			limit = {
				NOT = { var:petition_type = flag:development }
				var:my_suzerain.capital_province.county.development_level >= petitioner_development_difference_decision_value
			}
			add_to_variable_list = {
				name = available_petitions
				target = flag:development
			}
		}
		# Cull list to 4 max
		# Initialize the variable list
		random_in_list = {
			variable = available_petitions
			root = {
				add_to_variable_list = {
					name = petitions_to_show
					target = prev
				}
			}
		}
		hidden_effect = { # hidden so it doesn't show in the option tooltips
			while = { # Add up to 3 additional petitions
				count = 3
				random_in_list = {
					variable = available_petitions
					limit = {
						any_in_list = {
							variable = petitions_to_show
							NOT = { this = prev }
						}
					}
					root = {
						add_to_variable_list = {
							name = petitions_to_show
							target = prev
						}
					}
				}
			}
		}
	} 

	option = {
		name = petition_liege.9001.pay_debt
		trigger = { # Pay Debt
			any_in_list = {
				variable = petitions_to_show
				this = flag:pay_debt
			}
			NOT = { var:petition_type = flag:pay_debt }
			gold <= -100
			var:my_suzerain.gold >= petitioner_debt_positivization_root_value
		}
		set_variable = {
			name = petition_type
			value = flag:pay_debt
		}
	}
	option = {
		name = petition_liege.9001.war_aid
		trigger = { # War Aid
			any_in_list = {
				variable = petitions_to_show
				this = flag:war_aid
			}
			NOT = { var:petition_type = flag:war_aid }
			# Must not be in any war involving liege
			petition_liege_war_aid_share_trigger = yes
			# Losing an external war
			petition_liege_war_aid_trigger = yes
		}
		set_variable = {
			name = petition_type
			value = flag:war_aid
		}
	}
	option = {
		name = petition_liege.9001.county_control
		trigger = { # Bailiffs
			any_in_list = {
				variable = petitions_to_show
				this = flag:county_control
			}
			NOT = { var:petition_type = flag:county_control }
			any_held_title = { petition_liege_county_control_trigger = yes }
		}
		set_variable = {
			name = petition_type
			value = flag:county_control
		}
	}
	option = {
		name = petition_liege.9001.county_convert
		trigger = { # Convert
			any_in_list = {
				variable = petitions_to_show
				this = flag:county_convert
			}
			NOT = { var:petition_type = flag:county_convert }
			faith = var:my_suzerain.faith
			any_held_title = { petition_liege_county_convert_trigger = yes }
		}
		set_variable = {
			name = petition_type
			value = flag:county_convert
		}
	}
	option = {
		name = petition_liege.9001.county_opinion
		trigger = { # Opinion
			any_in_list = {
				variable = petitions_to_show
				this = flag:county_opinion
			}
			NOT = { var:petition_type = flag:county_opinion }
			any_held_title = { petition_liege_county_opinion_trigger = yes }
		}
		set_variable = {
			name = petition_type
			value = flag:county_opinion
		}
	}
	option = {
		name = petition_liege.9001.fortify_border
		trigger = { # Fortify
			any_in_list = {
				variable = petitions_to_show
				this = flag:fortify_border
			}
			NOT = { var:petition_type = flag:fortify_border }
			any_held_title = { petition_liege_fortify_border_trigger = yes }
			NOT = { var:my_suzerain.gold < 0 }
		}
		set_variable = {
			name = petition_type
			value = flag:fortify_border
		}
	}
	option = {
		name = petition_liege.9001.title_liege
		trigger = { # Liege Title
			any_in_list = {
				variable = petitions_to_show
				this = flag:title_liege
			}
			NOT = { var:petition_type = flag:title_liege }
			any_claim = { petition_liege_title_liege_trigger = yes }
		}
		set_variable = {
			name = petition_type
			value = flag:title_liege
		}
	}
	option = {
		name = petition_liege.9001.title_vassal
		trigger = { # Vassal Title
			any_in_list = {
				variable = petitions_to_show
				this = flag:title_vassal
			}
			NOT = { var:petition_type = flag:title_vassal }
			NOR = { # Only relevant if revocation is possible
				liege = { has_realm_law = crown_authority_0 }
				liege = { has_realm_law = tribal_authority_0 }
				liege = { has_realm_law = tribal_authority_1 }
			}
			any_claim = { petition_liege_title_vassal_trigger = yes }
		}
		set_variable = {
			name = petition_type
			value = flag:title_vassal
		}
	}
	option = {
		name = petition_liege.9001.construct_city
		trigger = { # Construct City
			any_in_list = {
				variable = petitions_to_show
				this = flag:construct_city
			}
			NOT = { var:petition_type = flag:construct_city }
			any_held_title = { petition_liege_construct_city_trigger = yes }
			var:my_suzerain.gold > main_building_tier_1_cost
		}
		set_variable = {
			name = petition_type
			value = flag:construct_city
		}
	}
	option = {
		name = petition_liege.9001.construct_temple
		trigger = { # Construct Temple
			any_in_list = {
				variable = petitions_to_show
				this = flag:construct_temple
			}
			NOT = { var:petition_type = flag:construct_temple }
			any_held_title = { petition_liege_construct_temple_trigger = yes }
			var:my_suzerain.gold > main_building_tier_1_cost
		}
		set_variable = {
			name = petition_type
			value = flag:construct_temple
		}
	}
	option = {
		name = petition_liege.9001.development
		trigger = { # Development
			any_in_list = {
				variable = petitions_to_show
				this = flag:development
			}
			NOT = { var:petition_type = flag:development }
			var:my_suzerain.capital_province.county.development_level >= petitioner_development_difference_decision_value
		}
		set_variable = {
			name = petition_type
			value = flag:development
		}
	}
	option = {
		name = petition_liege.9001.fallback
		set_variable = {
			name = petition_type
			value = flag:fallback
		}
	}

	after = {
		scope:petition_vassal = {
			trigger_event = petition_suzerain.9000
		}
	}
}

# Cleanup all the variables and flags from Petition Liege
scripted_effect petition_liege_variable_cleanup_effect = {
	if = {
		limit = { has_variable = petition_liege_scope }
		remove_variable = petition_liege_scope
	}
	if = {
		limit = { has_variable = petition_type }
		remove_variable = petition_type
	}
	if = {
		limit = { has_variable = petition_liege_council_first }
		remove_variable = petition_liege_council_first
	}
	if = {
		limit = { has_variable = petition_liege_council_second }
		remove_variable = petition_liege_council_second
	}
	if = {
		limit = { has_character_flag = petition_liege_character_flag }
		remove_character_flag = petition_liege_character_flag
	}
	if = {
		limit = { has_variable_list = available_petitions }
		clear_variable_list = available_petitions
	}
	if = {
		limit = { has_variable_list = petitions_to_show }
		clear_variable_list = petitions_to_show
	}
}

# Conclusion event that handles all the variables and travel and whatnot
petition_suzerain.9100 = {
	hidden = yes 
	immediate = {
		# Resume travel plan so you can go back home
		current_travel_plan = {
			resume_travel_plan = yes 
		}
		# remove variables and flags 
		petition_liege_variable_cleanup_effect = yes
	}
}

scripted_effect petition_liege_0001_refuse_petitioner_effect = {
	scope:petition_liege = { add_tyranny = petition_liege_refusal_tyranny_value }
	scope:petition_vassal = {
		if = {
			limit = { is_ai = yes }
			add_opinion = {
				modifier = refusal_opinion
				target = scope:petition_liege
				opinion = -20
			}
		}
		progress_towards_rival_effect = {
			CHARACTER = scope:petition_liege
			REASON = rival_petition_liege
			OPINION = 0
		}
	}
}

petition_suzerain.0001 = {
	type = letter_event
	opening = petition_liege.0001.opening
	desc = petition_liege.0001.desc
	sender = scope:petition_vassal

	trigger = {
		is_available = yes
		scope:petition_vassal = {
			is_alive = yes
			is_imprisoned = no
		}
	}

	option = { # Hear out
		name = petition_liege.0001.a
		custom_tooltip = petition_liege.0001.a.tt
		trigger_event = {
			on_action = petition_suzerain_0101
		}
		ai_chance = { base = 100 }
	}

	option = { # Turn away
		name = {
			trigger = {
				NOR = { 
					has_trait = arrogant
					has_trait = humble
				}
			}
			text = petition_liege.0001.b
		}
		name = {
			trigger = { has_trait = arrogant }
			text = petition_liege.0001.b.arrogant
		}
		name = {
			trigger = { has_trait = humble }
			text = petition_liege.0001.b.humble
		}
		custom_tooltip = petition_liege.0001.b.tt
		petition_liege_0001_refuse_petitioner_effect = yes
		scope:petition_vassal = { trigger_event = petition_liege.0009 }
		if = {
			limit = {
				NOT = { has_relation_rival = scope:petition_vassal }
			}
			stress_impact = {
				humble = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
		}
		else = {
			stress_impact = { base = medium_stress_impact_loss }
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 5
				opinion = {
					target = scope:petition_vassal
					value < 0
				}
			}
			modifier = {
				add = 45
				has_relation_rival = scope:petition_vassal
			}
		}
	}
}

petition_suzerain.0009 = {
	type = letter_event
	opening = petition_liege.0009.opening
	desc = petition_liege.0009.desc
	sender = scope:petition_liege

	trigger = { petition_suzerain_valid_trigger = yes }

	immediate = {
		show_as_tooltip = { petition_liege_0001_refuse_petitioner_effect = yes }
	}

	option = {
		name = petition_liege.0009.a
		trigger_event = petition_suzerain.9100
	}
}

# Court Event: Liege Hears Request
scripted_trigger needs_more_valid_compensation_options_trigger = {
	calc_true_if = {
		amount < 2
		exists = scope:bribe_gold
		exists = scope:bribe_factions
		exists = scope:bribe_favor
		exists = scope:bribe_contract
	}
}

petition_suzerain.0101 = {
	type = character_event
	title = {
		first_valid = {
			### General
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:pay_debt }
				desc = petition_liege.0101.t.pay_debt
			}
			### Wars
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:war_aid }
				desc = petition_liege.0101.t.war_aid
			}
			### Counties
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_control }
				desc = petition_liege.0101.t.county_control
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_convert }
				desc = petition_liege.0101.t.county_convert
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_opinion }
				desc = petition_liege.0101.t.county_opinion
			}
			### Construction/Development
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fortify_border }
				desc = petition_liege.0101.t.fortify_border
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_city }
				desc = petition_liege.0101.t.construct_city
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_temple }
				desc = petition_liege.0101.t.construct_temple
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:development }
				desc = petition_liege.0101.t.development
			}
		}
	}
	desc = {
		desc = petition_liege.0101.desc
		first_valid = {
			### General
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:pay_debt }
				desc = petition_liege.0101.desc.pay_debt
			}
			### Wars
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:war_aid }
				desc = petition_liege.0101.desc.war_aid
			}
			### Counties
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_control }
				desc = petition_liege.0101.desc.county_control
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_convert }
				desc = petition_liege.0101.desc.county_convert
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_opinion }
				desc = petition_liege.0101.desc.county_opinion
			}
			### Construction/Development
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fortify_border }
				desc = petition_liege.0101.desc.fortify_border
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_city }
				desc = petition_liege.0101.desc.construct_city
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_temple }
				desc = petition_liege.0101.desc.construct_temple
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:development }
				desc = petition_liege.0101.desc.development
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fallback }
				desc = petition_liege.0101.desc.pay_debt
			}
		}
	}
	theme = realm
	override_sound = { reference = "event:/SFX/Events/Themes/sfx_event_theme_type_duty" }

	trigger = {
		is_imprisoned = no
		scope:petition_vassal = {
			is_alive = yes
			is_imprisoned = no
		}
	}

	immediate = {
		if = { # Spend favor
			limit = {
				scope:petition_vassal = { has_hook = scope:petition_liege }
			}
			save_scope_value_as = { name = repay_favor value = yes }
		}
		# Save our opinion of the petitioner to influence ai_chance.
		save_opinion_value_as = {
			name = opinion_of_petitioner
			target = scope:petition_vassal
		}
	}

	option = { # Accept
		show_as_tooltip = {
			scope:petition_vassal = {
				change_tribute_exp_effect = { EXP = -20 }
			}
			scope:petition_liege = {
				change_tribute_exp_effect = { EXP = 10 }
			}
		}

		### General
		name = {
			trigger = {
				scope:petition_vassal.var:petition_type = flag:council_seat
				exists = scope:second_party
			}
			text = petition_liege.0101.accept.council_seat_occupied
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:council_seat }
			text = petition_liege.0101.accept.council_seat
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:pay_debt }
			text = petition_liege.0101.accept.pay_debt
		}
		### Titles
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:title_liege }
			text = petition_liege.0101.accept.title_liege
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:title_vassal }
			text = petition_liege.0101.accept.title_vassal
		}
		### Wars
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:faction_war }
			text = petition_liege.0101.accept.faction_war
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:vassal_war }
			text = petition_liege.0101.accept
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:war_aid }
			text = petition_liege.0101.accept.war_aid
		}
		### Counties
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:county_control }
			text = petition_liege.0101.accept.county_control
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:county_convert }
			text = petition_liege.0101.accept.county_convert
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:county_opinion }
			text = petition_liege.0101.accept.county_opinion
		}
		### Construction/Development
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:fortify_border }
			text = petition_liege.0101.accept.fortify_border
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:construct_city }
			text = petition_liege.0101.accept.construct_city
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:construct_temple }
			text = petition_liege.0101.accept.construct_temple
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:development }
			text = petition_liege.0101.accept.development
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:fallback }
			text = petition_liege.0101.accept.fallback
		}
		scope:petition_vassal = {
			trigger_event = {
				on_action = petition_liege_0201
			}
		}
		show_as_tooltip = {
			# Effects applied in petition_liege.0201
			petition_type_outcome_effect = yes
		}
		stress_impact = {
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_greed = -1
				ai_boldness = -0.5
				ai_compassion = 0.1
				ai_honor = 0.5
			}
			compare_modifier = {
				value = scope:opinion_of_petitioner
				multiplier = 1
			}
			modifier = {
				scope:petition_vassal = { petition_liege_relation_favor_trigger = yes }
			}
			modifier = {
				scope:petition_vassal = { petition_liege_relation_favor_trigger = yes }
				add = 25
			}
			modifier = {
				petition_liege_dislikes_trigger = { COMPARE = scope:second_party }
				add = 20
			}
			petition_liege_cost_negative_modifier = yes # less likely if expensive or likes second party
			modifier = { # Would be a better councillor
				OR = {
					petition_liege_councillor_replace_weight_trigger = { SKILL = diplomacy JOB = chancellor }
					petition_liege_councillor_replace_weight_trigger = { SKILL = martial JOB = marshal }
					petition_liege_councillor_replace_weight_trigger = { SKILL = stewardship JOB = steward }
					petition_liege_councillor_replace_weight_trigger = { SKILL = intrigue JOB = spymaster }
					petition_liege_councillor_replace_weight_trigger = { SKILL = learning JOB = court_chaplain }
				}
				add = 25
			}
			modifier = {
				add = 10
				max_military_strength <= scope:petition_vassal.max_military_strength
			}
			modifier = {
				scope:petition_vassal = { is_powerful_vassal = yes }
				add = 10
			}
			modifier = {
				any_targeting_faction = {
					faction_leader = scope:petition_vassal
					faction_power >= 60
				}
				add = 10
			}
			modifier = {
				scope:petition_vassal = { is_powerful_vassal = yes }
				trigger_if = {
					limit = { exists = scope:second_party }
					scope:second_party = { is_powerful_vassal = no }
				}
				add = 10
			}
			modifier = {
				scope:petition_vassal.var:petition_type = flag:war_aid
				add = -50
			}
			modifier = {
				scope:petition_vassal.var:petition_type = flag:war_aid
				gold < petitioner_war_aid_levies_cost_threshold_value
				add = -50
			}
			modifier = {
				scope:petition_vassal.var:petition_type = flag:war_aid
				gold < 0
				add = -1000
			}
			modifier = {
				scope:petition_vassal.var:petition_type = flag:war_aid
				is_at_war = yes
				add = petition_liege_war_aid_ongoing_count_trigger
			}
			modifier = {
				petition_war_aid_liege_merc_value < petition_war_aid_difference_value
				add = -100
			}
			modifier = {
				scope:petition_vassal.var:petition_type = flag:war_aid
				gold > major_gold_value
				petition_war_aid_liege_merc_value > petition_war_aid_difference_value
				add = 50
			}
		}
	}


	option = { # War Aid second option

		trigger = {
			scope:petition_vassal.var:petition_type = flag:war_aid
			NOT = { is_allied_to = scope:second_party }
		} 
		name = petition_liege.0101.war_aid_join
		scope:petition_vassal = {
			set_variable = petition_liege_war_aid_join
			trigger_event = {
				on_action = petition_liege_0201
			}
		}
		show_as_tooltip = {
			# Effects applied in petition_liege.0201
			if = {
				limit = {
					scope:petition_vassal = { is_attacker_in_war = scope:petition_war }
				}
				scope:petition_war = { add_attacker = scope:petition_liege }
			}
			else = {
				scope:petition_war = { add_defender = scope:petition_liege }
			}
			petition_pos_grandeur_renown_effect = yes
		}
		ai_chance = {
			base = 15
			ai_value_modifier = {
				ai_greed = -2
				ai_boldness = 2
				ai_energy = 1
			}
			petition_liege_cost_negative_modifier = yes # less likely if expensive or likes second party
			compare_modifier = {
				value = scope:opinion_of_petitioner
				multiplier = 1
			}
			modifier = {
				add = -50
				petition_war_aid_vassal_liege_combined_value < petition_war_aid_strongest_enemy_strength_value
			}
			modifier = {
				is_at_war = yes
				add = petition_liege_war_aid_ongoing_count_trigger
			}
			modifier = { # 
				petition_war_aid_liege_merc_value < petition_war_aid_difference_value
				add = -100
			}
		}
	}

	option = { # Repay existing favor

		trigger = { exists = scope:repay_favor }
		name = petition_liege.0101.repay_favor
		save_scope_value_as = { name = bribe_type value = 0 }
		scope:petition_vassal = {
			trigger_event = {
				on_action = petition_liege_0205
			}
		}
		custom_tooltip = petition_liege.0101.additional_effects
		show_as_tooltip = {	
			# Effects applied in petition_liege.0205
			random_list = {
				1 = {
					show_chance = no
					desc = petition_liege.0101.bribe_given
					# Remove the existing debt
					scope:petition_vassal = {
						remove_hook = { target = scope:petition_liege }
					}
				}
				1 = {
					show_chance = no
					desc = petition_liege.0101.bribe_refused
					show_as_tooltip = {
						reverse_add_opinion = {
							modifier = disappointed_opinion
							target = scope:petition_vassal
							opinion = -15
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_rationality = 2
				ai_boldness = 1
				ai_compassion = 0.5
				ai_honor = 1
			}
			petition_liege_cost_negative_modifier = yes # less likely if expensive or likes second party
		}
	}

	option = { # Refuse
		show_as_tooltip = {
			scope:petition_vassal = {
				change_tribute_exp_effect = { EXP = 10 }
			}
		}
		### General
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:pay_debt }
			text = petition_liege.0101.refusal.pay_debt
		}
		### Wars
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:war_aid }
			text = petition_liege.0101.refusal.war_aid
		}
		### Counties
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:county_control }
			text = petition_liege.0101.refusal.county_control
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:county_convert }
			text = petition_liege.0101.refusal.county_convert
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:county_opinion }
			text = petition_liege.0101.refusal.county_opinion
		}
		### Construction/Development
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:fortify_border }
			text = petition_liege.0101.refusal.fortify_border
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:construct_city }
			text = petition_liege.0101.refusal.construct_city
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:construct_temple }
			text = petition_liege.0101.refusal.construct_temple
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:development }
			text = petition_liege.0101.refusal.development
		}
		name = {
			trigger = { scope:petition_vassal.var:petition_type = flag:fallback }
			# Reusing text for loc budget
			text = petition_liege.0101.refusal.pay_debt
		}
		scope:petition_vassal = { trigger_event = petition_suzerain.0209 }
		if = {
			limit = {
				scope:petition_vassal = { is_ai = yes }
			}
			show_as_tooltip = {
				reverse_add_opinion = {
					modifier = refusal_opinion
					target = scope:petition_vassal
					opinion = -20
				}
			}
		}
		if = {
			limit = {
				NOR = {
					petition_liege_medium_cost_trigger = yes
					petition_liege_high_cost_trigger = yes
				}
			}
			petition_neg_grandeur_renown_effect = yes
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_greed = 1.5
				ai_boldness = 1
				ai_compassion = -1
				ai_honor = -0.5
			}
			compare_modifier = {
				value = scope:opinion_of_petitioner
				multiplier = -1
			}
			modifier = {
				exists = scope:second_party
				scope:second_party = { is_powerful_vassal = yes }
				scope:petition_vassal = { is_powerful_vassal = no }
				add = 10
			}
			modifier = {
				exists = scope:second_party
				any_targeting_faction = {
					faction_leader = scope:second_party
					faction_power >= 60
				}
				add = 10
			}
			modifier = {
				exists = scope:second_party
				max_military_strength <= scope:second_party.max_military_strength
				add = 10
			}
			modifier = {
				exists = scope:second_party
				scope:second_party.max_military_strength >= scope:petition_vassal.max_military_strength
				add = 10
			}
		}
	}
	
}

# Court Event: Vassal Hears Liege's Acceptance
petition_liege.0201 = {
	type = character_event
	title =	petition_liege.0201.t
	desc = {
		desc = petition_liege.0201.desc.intro
		first_valid = {
			### General
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:pay_debt }
				desc = petition_liege.0201.desc.pay_debt
			}
			### Wars
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:war_aid }
				desc = petition_liege.0201.desc.war_aid
			}
			### Counties
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_control }
				desc = petition_liege.0201.desc.county_control
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_convert }
				desc = petition_liege.0201.desc.county_convert
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_opinion }
				desc = petition_liege.0201.desc.county_opinion
			}
			### Construction/Development
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fortify_border }
				desc = petition_liege.0201.desc.fortify_border
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_city }
				desc = petition_liege.0201.desc.construct_city
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_temple }
				desc = petition_liege.0201.desc.construct_temple
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:development }
				desc = petition_liege.0201.desc.development
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fallback }
				desc = petition_liege.0201.desc.pay_debt
			}
		}
		triggered_desc = {
			trigger = {
				scope:petition_vassal.var:petition_type = flag:council_seat
				exists = scope:second_party
			}
			desc = petition_liege.0201.desc.council_second_party
		}
		desc = petition_liege.0201.desc.bridge
	}
	theme = realm
	override_sound = { reference = event:/SFX/Events/Themes/sfx_event_theme_type_generic }
	court_scene = {
		button_position_character = scope:petition_liege
		court_owner = scope:petition_liege
		roles = {
		    scope:petition_vassal = {
				group = petitioners_group
				animation = throne_room_kneel_1
		    }
		}
	}

	trigger = { petition_suzerain_valid_trigger = yes }

	immediate = {
	}

	option = { 
		name = petition_liege.0201.a
		# Reap the benefits at no cost!
		petition_type_outcome_effect = yes
		reverse_add_opinion = {
			modifier = pleased_opinion
			target = scope:petition_liege
			opinion = 10
		}
	}
	
	after = {
		trigger_event = petition_suzerain.9100
	}
}


petition_suzerain.0209 = {
	type = character_event
	title =	petition_liege.0209.t
	desc = {
		desc = petition_liege.0209.desc.intro
		first_valid = {
			### General
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:pay_debt }
				desc = petition_liege.0201.desc.pay_debt
			}
			### Wars
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:war_aid }
				desc = petition_liege.0201.desc.war_aid
			}
			### Counties
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_control }
				desc = petition_liege.0201.desc.county_control
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_convert }
				desc = petition_liege.0201.desc.county_convert
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:county_opinion }
				desc = petition_liege.0201.desc.county_opinion
			}
			### Construction/Development
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fortify_border }
				desc = petition_liege.0201.desc.fortify_border
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_city }
				desc = petition_liege.0201.desc.construct_city
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:construct_temple }
				desc = petition_liege.0201.desc.construct_temple
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:development }
				desc = petition_liege.0201.desc.development
			}
			triggered_desc = {
				trigger = { scope:petition_vassal.var:petition_type = flag:fallback }
				desc = petition_liege.0201.desc.pay_debt
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {	
					reverse_opinion = {
 						target = scope:petition_vassal
 						value <= -20
 					}
				}
				desc = petition_liege.0209.desc.bridge.unapologetic
			}
			triggered_desc = {
				trigger = { petition_liege_relation_favor_trigger = yes }
				desc = petition_liege.0209.desc.bridge.favor
			}
			desc = petition_liege.0209.desc.bridge.apologetic
		}
	}
	theme = realm
	override_sound = { reference = event:/SFX/Events/Themes/sfx_event_theme_type_generic }
	court_scene = {
		button_position_character = scope:petition_liege
		court_owner = scope:petition_liege
		roles = {
		    scope:petition_vassal = {
				group = petitioners_group
				animation = throne_room_kneel_1
		    }
		}
	}

	trigger = { petition_liege_valid_trigger = yes }

	immediate = {
	}

	option = { 
		name = petition_liege.0209.counter
		trigger = {
			is_ai = no
			liege = { is_ai = yes }
			petition_liege_has_main_skiller_trigger = yes
		}
		add_prestige = minor_prestige_loss
		trigger_event = { on_action = petition_liege_0401 }
		custom_tooltip = petition_liege_skillcheck_counter_tt
		ai_chance = {
			base = 0
		}
	}

	option = { 
		name = {
			trigger = { petition_liege_relation_favor_trigger = no }
			text = petition_liege.0209.a
		}
		name = {
			trigger = { petition_liege_relation_favor_trigger = yes }
			text = petition_liege.0209.favor
		}
		if = {
			limit = {
				scope:petition_vassal = { is_ai = yes }
			}
			add_opinion = {
				modifier = refusal_opinion
				target = scope:petition_liege
				opinion = -20
			}
		}
		if = {
			limit = { petition_liege_relation_favor_trigger = yes }
			add_hook = {
				type = favor_hook
				target = scope:petition_liege
			}
		}
		show_as_tooltip = {
			if = {
				limit = {
					NOR = {
						petition_liege_medium_cost_trigger = yes
						petition_liege_high_cost_trigger = yes
					}
				}
				petition_neg_grandeur_renown_effect = yes
			}
		}
		ai_chance = {
			base = 25
		}
		trigger_event = petition_suzerain.9100
	}
}


#Liege no longer available
petition_suzerain.0601 = {
	type = character_event
	title = petition_liege.0601.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_royal_court = yes }
				desc = petition_liege.0601.desc.court
			}
			triggered_desc = {
				trigger = { is_imprisoned = yes }
				desc = petition_liege.0601.desc.imprisoned
			}
			triggered_desc = {
				trigger = {
					scope:petition_liege = {
						is_alive = no
						exists = killer
						killer = root
					}
				}
				desc = petition_liege.0601.desc.liege_dead_me
			}
			triggered_desc = {
				trigger = {
					scope:petition_liege = { is_alive = no }
				}
				desc = petition_liege.0601.desc.liege_dead
			}
			triggered_desc = {
				trigger = {
					scope:petition_liege = {
						is_imprisoned = yes
						exists = imprisoner
						imprisoner = root
					}
				}
				desc = petition_liege.0601.desc.liege_imprisoned_me
			}
			triggered_desc = {
				trigger = {
					scope:petition_liege = { is_imprisoned = yes }
				}
				desc = petition_liege.0601.desc.liege_imprisoned
			}
		}
		triggered_desc = {
			trigger = {
				scope:petition_liege = { is_alive = no }
				exists = liege
				NOT = { liege = root }
			}
			desc = petition_liege.0601.desc.new_liege
		}
		triggered_desc = {
			trigger = {
				scope:petition_liege = { is_alive = yes }
				exists = liege
				NOT = { liege = root }
			}
			desc = petition_liege.0601.desc
		}
	}
	theme = realm
	left_portrait = {
		character = scope:petition_liege
		triggered_animation = {
			trigger = { is_imprisoned = yes }
			animation = prisondungeon
		}
		triggered_animation = {
			trigger = { is_alive = no }
			animation = idle
		}
		triggered_animation = {
			trigger = { is_available = no }
			animation = dismissal
		}
	}
	right_portrait = {
		character = var:my_suzerain
		trigger = {
			NOT = { var:my_suzerain = scope:petition_liege }
		}
	}

	trigger = {
		is_alive = yes
		has_variable = petition_liege_scope
	}

	option = {
		name = {
			text = petition_liege.0601.a_court
			trigger = { has_royal_court = yes }
		}
		name = {
			text = petition_liege.0601.a_prison
			trigger = { is_imprisoned = yes }
		}
		name = {
			text = petition_liege.0601.a_liege
			trigger = {
				scope:petition_liege = {
					is_alive = yes
					is_imprisoned = no
				}
			}
		}
		name = {
			text = petition_liege.0601.a
			trigger = { always = yes }
		}
		remove_decision_cooldown = petition_liege_decision
	}

	after = {
		trigger_event = petition_suzerain.9100
	}
}
