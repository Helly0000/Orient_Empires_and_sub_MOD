##################################################
# PRIMEMINISTERSHIPS
## Power sharing arrangements where the diarch is expected to hold authority semi-permanently in order to assist their liege, but still derives that authority from their liege rather than themselves.

# 录尚书事、平章军国重事、首辅
## A type of diarchy accessible to clans, where the chief minister exercises huge amounts of discretion on behalf of their ruler. This frees the ruler up to better perform at many tasks, but poses greater long-term risks.
## Generally intended to be lower tempo than regencies.
ChengXiang = {
	# Handled via content - this is only for power sharing arrangements we want to start automatically.
	start = { 
		always = yes
	}

	end = {
		liege = {
			is_oe_imperial_government_trigger = no
		}
	}

	# Mandates
	## Just the standard suite
	mandate = fill_coffers
	mandate = swell_armies
	mandate = promote_authority
	## Aptitudes.
	aptitude_score = {
		add = mandate_type_qualification:fill_coffers
		add = mandate_type_qualification:swell_armies
		add = mandate_type_qualification:promote_authority
	}
	
	# Scales of Power
	## 000
	power_level = {
		swing = 0
		parameter = unlock_syphon_treasury_interaction
		parameter = unlock_shift_privileges_interaction
		parameter = unlock_mulct_vizier_interaction
		parameter = lieges_swing_more_against_diarchs
		# We put a toggle on here so we can early out of diarchy checks for tax collectors a little faster + explicitly list the diarch bonus.
		parameter = diarch_aptitude_helps_tax_collectors_toggle
	}
	## 020
	power_level = {
		swing = 20
		parameter = primeminister_dismissal_will_upset_administration
		parameter = primeminister_requires_county
		parameter = diarch_aptitude_helps_tax_collectors_t1
	}
	## 040
	power_level = {
		swing = 40
		parameter = diarch_aptitude_helps_tax_collectors_t2
	}
	## 60
	power_level = {
		swing = 60
		parameter = primeminister_requires_duchy
		parameter = diarch_aptitude_helps_tax_collectors_t3
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_mild
	}
	power_level = {
		swing = 60
		hidden_parameter = vizier_cannot_be_snaked
	}
	## 70
	power_level = {
		swing = 70
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_medium
	}
	## 080
	power_level = {
		swing = 80
		parameter = diarch_aptitude_helps_tax_collectors_t4
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_major
	}
	## 90
	power_level = {
		swing = 90
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_massive
		parameter = regents_can_try_to_overthrow_present_lieges
	}

	# Trend towards an even balance of power.
	swing_balance = {
		value = 40
	}

	succession = yes
	# Candidate scoring for succession.
	candidate_score = { add = diarchy_vizier_succession_score_value }

	# Container for hidden parameters.
	power_level = {
		swing = 0
		hidden_parameter = diarchy_is_vizierate
		hidden_parameter = vizier_sits_in_the_council_instead_of_spouse
		# This one isn't hooked up to anything yet - just here to establish a parameter standard for mods & potential... _future_ diarchies.
		hidden_parameter = diarchy_is_primeministership
		hidden_parameter = mandate_tempo_slow
	}

	loyalty_score = { add = diarch_loyalty_score_type_vizierate_value }

	end_interaction = liege_dismiss_vizier_interaction

	liege_modifier = {
		name = from_diarch_domain_limit_bonus
		tax_slot_add = 1
		scale = { add = vizier_bonus_tax_jurisdictions_value }
	}

	diarch_modifier = {
		name = family_member_is_civil_servant
		stress_gain_mult = 0.3
		monthly_dynasty_prestige = -0.25
	}
	diarch_modifier = {
		name = civil_servant_salary_and_corruption
		monthly_income = 1
		scale = {
			add = liege.monthly_character_balance
			multiply = {
				add = stewardship
				# Get nearest complete 5.
				divide = 5
				round = yes
				min = 1
				# And fractalise.
				divide = 20
				# So we should be getting something like 5% of our liege's income per 5 stewardship, with rounding errors.
				## Plus, y'know, Paradox maths.
			}
		}
	}
}


#大司马大将军、都督中外诸军事、天下兵马大元帅
# Entrenched Regencies
## Regencies that have matured or had time to become severe, making them more of a pain to remove.
## Referenced in code - this is the diarchy type used for long-term diarchies, it must always exist and be available to any ruler
DaSiMa = {
	# Handled via content - this is only for power sharing arrangements we want to start automatically.
	start = { always = yes }

	# Handled via content - this is only for power sharing arrangements we want to end automatically.
	end = { always = no }

	# Mandates
	## Just the standard suite
	mandate = fill_coffers
	mandate = swell_armies
	mandate = promote_authority
	## Aptitudes.
	aptitude_score = {
		add = mandate_type_qualification:fill_coffers
		add = mandate_type_qualification:swell_armies
		add = mandate_type_qualification:promote_authority
	}
	
	# Scales of Power
	## 000
	power_level = {
		swing = 0
		parameter = dismissal_requires_gift
		parameter = unlock_syphon_treasury_interaction
		parameter = diarch_can_subsidise_liege_authority

		hidden_parameter = diarchy_is_primeministership
	}
	## 020
	power_level = {
		swing = 20
		parameter = unlock_shift_privileges_interaction
		parameter = diarch_gets_a_free_change_on_vassal_contract
		parameter = regency_free_end_below_this_point
	}
	## 040
	power_level = {
		swing = 40
		parameter = unlock_legal_meddling_interaction
		parameter = unlock_diarch_revoke_title_interaction
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_mild
	}
	## 60
	power_level = {
		swing = 60
		parameter = unlock_diarch_retract_vassal_interaction
		parameter = unlock_diarch_imprison_interaction
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_medium
	}
	## 080
	power_level = {
		swing = 80
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_major
		parameter = regency_cant_be_ended_above_this_point
	}
	## 95
	power_level = {
		swing = 95
		parameter = liege_pays_currency_surcharge_for_mundane_interactions_massive
		parameter = regents_can_try_to_overthrow_present_lieges
		parameter = regents_can_try_to_overthrow_present_lieges_help
	}

	# Trend towards an even balance of power.
	swing_balance = {
		value = 50

		# Accolades
		## Politicker helps liege during a regency
		if = {
			limit = {
				liege ?= {
					any_active_accolade = {
						has_accolade_parameter = accolade_influences_regency
					}
				}
			}
			add = accolade_scales_of_power_value
		}
		if = {
			limit = {
				liege ?= {
					any_active_accolade = {
						has_accolade_parameter = accolade_influences_regency_high
					}
				}
			}
			add = accolade_scales_of_power_value_high
		}
		# Liege is able to end diarchy.
		if = {
			limit = {
				liege ?= { can_leave_diarchy_trigger = yes }
			}
			multiply = 0
		}
	}

	succession = yes
	# Candidate scoring for succession.
	candidate_score = { add = diarchy_regent_succession_score_value }

	# Container for hidden parameters.
	power_level = {
		swing = 0
		hidden_parameter = diarchy_is_regency
		hidden_parameter = diarchy_type_is_entrenched_regency
		hidden_parameter = mandate_tempo_fast

		hidden_parameter = diarchy_is_primeministership
	}

	loyalty_score = { add = diarch_loyalty_score_type_regency_value }

	end_interaction = liege_dismiss_entrenched_regency_interaction

	liege_modifier = {
		name = from_diarch_domain_limit_bonus
		domain_limit = 1
		scale = {
			add = stewardship
			divide = 6
		}
	}

	diarch_modifier = {
		name = to_diarch_stress_gain
		stress_gain_mult = 0.3
	}
}

