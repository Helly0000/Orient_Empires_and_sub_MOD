#获得头衔时触发
# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
# scope:transfer_type 的可用类型
# flag:conquest 
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

on_game_start_after_lobby = { #开局分配官阶
	on_actions = {
		east_on_after_lobby_bureaucrat_effects
	}
}	
	
	
east_on_after_lobby_bureaucrat_effects = {	
	effect = {
		every_ruler = {
			if = {
				limit = {
					is_oe_landed_bureaucrat_trigger = yes
					is_adult = yes
				}
				if = {
					limit = { NOT = { has_trait = lifestyle_bureaucrat } }
					add_trait = lifestyle_bureaucrat
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = scholastics
						LEVEL_1 = yes
						LEVEL_3 = no
					}
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = accomplishments
						LEVEL_1 = yes
						LEVEL_3 = no
					}
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = sociability
						LEVEL_1 = yes
						LEVEL_3 = no
					}
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = seniority
						LEVEL_1 = yes
						LEVEL_3 = no
					}
				}
				if = {
					limit = {
						NOT = { has_character_modifier = bureaucrat_positioned_term }
					}
					add_character_modifier = {
						modifier = bureaucrat_positioned_term
						years = 5
					}
				}
				if = {
					limit = {
						has_trait = jinshi
						NOT = { has_trait = lifestyle_bureaucrat }
					}
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
						add_trait_xp = {
							trait = lifestyle_bureaucrat
							track = scholastics
							value = medium_lifestyle_random_xp_low
						}
					}
				}
				if = {
					limit = {
						has_trait = zhuangyuan
					}
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
						add_trait_xp = {
							trait = lifestyle_bureaucrat
							track = scholastics
							value = medium_lifestyle_random_xp_high
						}
					}
				}
			}
		}
		every_ruler = {
			if = {
				limit = {
					government_has_flag = flag_is_celestial
				}
				every_councillor = {
					#随机获得官阶经验
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
						#考绩数值用于开局判定资历，可比较同官阶角色的次序，以节省性能。
						add_trait_xp = {
							trait = lifestyle_bureaucrat
							track = seniority
							value = age
						}
						add_trait_xp = {
							trait = lifestyle_bureaucrat
							track = accomplishments
							value = bureaucracy_exp_value
						}
					}
				}
			}
		}
		
	}
}


three_year_playable_pulse = { #三年考绩+科举
	on_actions = { 
		BureaucracyEmpire_jinshi_pulse
		BureaucracyEmpire_yearly_new_pulse
		#BureaucracyEmpire_yamato_pulse
	}
}

#科举考试
BureaucracyEmpire_jinshi_pulse = {
	trigger = {
		has_primary_title = title:e_celestia
		is_at_war = no
		piety_level >= 4
		has_global_variable = examination_modifier
	}
	effect = {
		add_piety = -100
		primary_title = { save_scope_as = temp_title }
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_jinshi_repopulate
			save_scope_as = jinshi1
		}
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_jinshi_repopulate
			save_scope_as = jinshi2
		}
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_jinshi_repopulate
			save_scope_as = jinshi3
		}
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_zhuangyuan_repopulate
			save_scope_as = zhuangyuan
		}
		add_courtier = scope:zhuangyuan
	}
}

#random_yearly_everyone_pulse = { #提拔县官时开启
	#on_actions = { 
		#BureaucracyEmpire_yearly_new_pulse
	#}
#}
#three_year_pool_pulse = { 无地考绩高者获得官阶
#	on_actions = { 
#		BureaucracyEmpire_pool_pulse
#	}
#}
#
#BureaucracyEmpire_pool_pulse = {
#	effect = {
#		if = {
#			limit = {			
#				OR = {
#					bureaucracy_exp_value > 40
#					has_trait = jinshi
#					has_trait = zhuangyuan
#					has_trait = lifestyle_bureaucrat
#				}
#			}
#			#添加官阶特质
#			if = {
#				limit = { NOT = { has_trait = lifestyle_bureaucrat } }
#				add_trait = lifestyle_bureaucrat
#				add_trait_xp = {
#					trait = lifestyle_bureaucrat
#					track = seniority
#					value = bureaucracy_exp_value
#				}
#			}
#			random_ruler = {
#				limit = { is_oe_imperial_court_trigger = yes }
#				save_scope_as = temp_liege
#			}
#			move_to_pool_at = scope:temp_liege.capital_county.title_province
#		}
#	}
#}

BureaucracyEmpire_yearly_new_pulse = {
	effect = {
		if = {#年度官僚资历结算
			limit = {
				OR = {
					is_oe_landed_bureaucrat_trigger = yes
					AND = {
						is_councillor = yes
						exists = liege_or_court_owner
						liege_or_court_owner = { government_has_flag = flag_is_celestial }
					}
					has_trait = lifestyle_bureaucrat
				}
			}
			#添加官阶特质
			if = {
				limit = { NOT = { has_trait = lifestyle_bureaucrat } }
				add_trait = lifestyle_bureaucrat
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = seniority
					value = age
				}
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = bureaucracy_exp_value
				}
			}
			every_councillor = {
				#添加官阶特质
				if = {
					limit = { NOT = { has_trait = lifestyle_bureaucrat } }
					add_trait = lifestyle_bureaucrat
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = seniority
						value = age
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = bureaucracy_exp_value
					}
				}
			}
			save_scope_as = bureaucrat		
			primary_title = { save_scope_as = primary_title }
			every_held_title = {
				add_to_list = list_old_titles
			}
			liege = { save_scope_as = temp_liege } #top_liege
			#储存契约
			save_east_contract_effect = yes
			if = {
				limit = {
					is_oe_landed_bureaucrat_trigger = yes #天朝流官
					has_trait = lifestyle_bureaucrat
				}
				#资历
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = seniority
					value = highest_held_title_tier
				}
				#奉献等级
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = scholastics
					value = piety_level
				}
				#是内阁成员
				if = {
					limit = { is_councillor = yes }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = dynasty.dynasty_prestige_level
					}
				}			
				#生活方式加经验
				if = {
					limit = {
						OR = {
							has_lifestyle = learning_lifestyle
							has_trait = jinshi
							has_trait = zhuangyuan
							has_trait = poet
							has_trait = lifestyle_mystic
						}
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = scholastics
						value = perks_in_learning_lifestyle
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = scholastics
						value = dynasty.dynasty_prestige_level
					}
				}
				if = {
					limit = { has_lifestyle = stewardship_lifestyle }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = perks_in_stewardship_lifestyle
					}
				}
				if = {
					limit = { has_lifestyle = diplomacy_lifestyle }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = sociability
						value = perks_in_diplomacy_lifestyle
					}
				}
				#门第加成、朝中有人
				if = {
					limit = {
						exists = dynasty
						NOT = { dynasty = top_liege.dynasty }
						dynasty = { dynasty_prestige_level >= 1 }
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = sociability
						value = dynasty.dynasty_prestige_level
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = sociability
						value = Bureaucrat_emperor_opinion_value
					}
					#add_trait_xp = {
						#trait = lifestyle_bureaucrat
						#track = sociability
						#value = Bureaucrat_councillor_opinion_value
					#}
				}
				#民众满意度
				if = {
					limit = { has_lifestyle = stewardship_lifestyle }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = Bureaucrat_county_opinion_value
					}
				}
				#退休和罢免
				if = {
					limit = {
						is_oe_landed_bureaucrat_trigger = yes #天朝流官
						is_oe_available_ai_at_peace = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term }
						NOT = { is_councillor_of = top_liege }
						NAND = {
							is_councillor = yes
							exists = liege_or_court_owner
							liege_or_court_owner = { is_ai = no }
						}
						OR = {
							age < 20 #知州最低年龄
							age > 70
							is_physically_able = no
							is_oe_illegal_criminal_trigger = yes #众所周知的罪行
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = women_cannot_be_granted_titles }
								}
								is_female = yes
							}
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = men_cannot_be_granted_titles }
								}
								is_male = yes
							}
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = men_cannot_be_granted_titles }
								}
								is_male = yes
							}
							AND = {
								OR = {
									age < 30 #节度使最低年龄
									lifestyle_bureaucrat_1_trigger = yes
									lifestyle_bureaucrat_2_trigger = yes
								}
								highest_held_title_tier >= tier_duchy
							}
							AND = { #能力不及手下
								any_vassal = {
									AND = {
										has_trait = lifestyle_bureaucrat
										bureaucrat_level_value > root.bureaucrat_level_value
									}
									count > 3
								}
								highest_held_title_tier = tier_duchy
							}
						}
					}
					if = {
						limit = { is_diarch = yes }
						depose_diarch = yes
					}
					depose = yes

					every_in_list = {
						list = list_old_titles
						scope:bureaucrat = {
							remove_claim = prev
						}
					}
					move_to_pool_at = scope:temp_liege.capital_county.title_province
					add_stress = 100
				}
				#升迁
				if = {
					limit = {
						is_oe_landed_bureaucrat_trigger = yes #天朝流官
						is_oe_available_ai_at_peace = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term }
						OR = {
							trigger_if = {
								limit = {
									OR = {
										lifestyle_bureaucrat_3_trigger = yes
										lifestyle_bureaucrat_4_trigger = yes
										lifestyle_bureaucrat_5_trigger = yes
									}
									highest_held_title_tier = tier_barony
								}
							}
							trigger_if = {
								limit = {
									OR = {
										lifestyle_bureaucrat_4_trigger = yes
										lifestyle_bureaucrat_5_trigger = yes
									}
									highest_held_title_tier <= tier_county
								}
							}
						}
					}
					if = {
						limit = { is_diarch = yes }
						depose_diarch = yes
					}
					depose = yes

					every_in_list = {
						list = list_old_titles
						scope:bureaucrat = {
							remove_claim = prev
						}
					}
					move_to_pool_at = scope:temp_liege.capital_county.title_province
					add_stress = -100
				}
			}
			#罢免 清空资历
			if = {
				limit = {
					is_oe_landed_bureaucrat_trigger = yes #天朝流官
					is_oe_available_ai_at_peace = yes
				}
				if = {
					limit = {
						OR = {
							is_physically_able = no
							is_oe_illegal_criminal_trigger = yes #众所周知的罪行
						}
					}
					if = {
						limit = { has_trait = lifestyle_bureaucrat }
						remove_trait = lifestyle_bureaucrat
					}
				}
			}
			if = {
				limit = {
					is_independent_ruler = yes
				}
				if = {
					limit = { has_trait = lifestyle_bureaucrat }
					remove_trait = lifestyle_bureaucrat
				}
			}
		}
	}
}

on_title_gain = {
	on_actions = {
		BureaucracyEmpire_player_pulse
		BureaucracyEmpire_ai_succession_pulse #指定继承人
		BureaucracyEmpire_on_title_gain_new #交接非法理头衔
		BureaucracyEmpire_on_title_gain_remove	#抹去官阶
	}
}
#玩家流官叙迁，用其他默认官员触发
BureaucracyEmpire_player_pulse = {
	trigger = {
		scope:title.tier > tier_barony
		is_oe_landed_bureaucrat_trigger = yes #暂时接班的ai
		is_oe_available_ai_at_peace = yes
		is_councillor = no
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			#scope:transfer_type = flag:granted #被授予头衔
			scope:transfer_type = flag:usurped #篡夺头衔
		}
		NOT = { has_character_modifier = bureaucrat_positioned_term }
	}	
	effect = {
		save_scope_as = temp_holder
		liege = {
			save_scope_as = liege
		}
		scope:temp_holder = {
			save_east_contract_effect = yes
		}
		every_held_title = {
			add_to_list = list_temp_title #目的地官位
		}
		every_vassal = {
			add_to_list = list_temp_vassal #目的地封臣
		}
		every_courtier = {
			add_to_list = list_temp_courtier #卸任廷臣
		}
		every_player = {
			if = {
				limit = {
					is_ai = no
					is_oe_landed_bureaucrat_trigger = yes
				}
			}
			save_scope_as = player
		}
		if = {
			limit = {
				exists = scope:player
			}
			scope:player = {
				primary_title = {
					save_scope_as = old_primary_title #卸任官位
				}
				every_held_title = {
					add_to_list = list_old_title  #卸任官位
				}
				every_vassal = {
					add_to_list = list_old_vassal #卸任封臣
				}
				every_courtier = {
					add_to_list = list_old_courtier #卸任廷臣
				}
				liege = {
					save_scope_as = old_liege #卸任领主
				}
			}
			#玩家升迁，比较考绩即可
			if = {
				limit = {
					exists = scope:player.top_liege
					exists = scope:temp_holder.top_liege
					scope:player.top_liege = scope:temp_holder.top_liege
					OR = {
						scope:title.tier > scope:player.primary_title.tier #爵级
						AND = {
							scope:title.tier = scope:player.primary_title.tier #爵级
							scope:temp_holder.bureaucrat_title_score > scope:player.bureaucrat_title_score #州等
						}
					}
					scope:player = {
						is_oe_landed_bureaucrat_trigger = yes
						is_oe_available = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term }
						is_oe_illegal_criminal_trigger = no #众所周知的罪行
					}
					#scope:player.bureaucracy_exp_value > scope:temp_holder.bureaucracy_exp_value #比较考绩
					OR = {
						scope:player.bureaucrat_level_value > scope:temp_holder.bureaucrat_level_value #比较官阶
						AND = {
							scope:player.bureaucrat_level_value = scope:temp_holder.bureaucrat_level_value #比较官阶
							scope:player.bureaucracy_exp_value >= scope:temp_holder.bureaucracy_exp_value #比较考绩
						}
					}
				}
				scope:player = {
					trigger_event = bureaucracy.0001 #升官
				}
			}
			#玩家左迁，劣迹斑斑
			if = {
				limit = {
					exists = scope:player.top_liege
					exists = scope:temp_holder.top_liege
					scope:player.top_liege = scope:temp_holder.top_liege
					OR = {
						scope:title.tier < scope:player.primary_title.tier #爵级
						scope:temp_holder.bureaucrat_title_score < scope:player.bureaucrat_title_score #州等
					}
					#scope:player.bureaucracy_exp_value < scope:temp_holder.bureaucracy_exp_value #比较考绩
					scope:player.bureaucrat_level_value < scope:temp_holder.bureaucrat_level_value #比较官阶
					scope:player = {
						is_oe_landed_bureaucrat_trigger = yes
						is_oe_available = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term }
						OR = {
							is_oe_illegal_criminal_trigger = yes #众所周知的罪行
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = women_cannot_be_granted_titles }
								}
								is_female = yes
							}
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = men_cannot_be_granted_titles }
								}
								is_male = yes
							}
							trigger_if = {
								limit = {
									OR = {
										lifestyle_bureaucrat_1_trigger = yes
										lifestyle_bureaucrat_2_trigger = yes
									}
									highest_held_title_tier >= tier_duchy
								}
							}
							trigger_if = {
								limit = {
									lifestyle_bureaucrat_1_trigger = yes
									highest_held_title_tier >= tier_county
								}
							}
						}
					}
				}
				scope:player = {
					trigger_event = bureaucracy.0007 #贬官
				}
			}
		}
	}
}


BureaucracyEmpire_on_title_gain_remove = {
	trigger = {
		has_trait = lifestyle_bureaucrat
	}
	effect = {
		if = {
			limit = {
				can_have_official_succession_law_trigger = no
				can_have_official_succession_law_player_trigger = no
			}
			remove_trait = lifestyle_bureaucrat
		}
	}
}
BureaucracyEmpire_on_title_gain_new = {
	trigger = {
		#在天朝体制下
		is_oe_landed_bureaucrat_trigger = yes
		is_adult = yes
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:granted #被授予头衔
			scope:transfer_type = flag:usurped #篡夺头衔
		}
		#scope:title = primary_title 升迁
	}
	effect = {
		top_liege = { save_scope_as = temp_liege }
		if = {
			limit = {
				scope:transfer_type = flag:granted #被授予头衔
				liege = { is_ai = no }
				is_adult = yes
			}
			add_character_modifier = {
				modifier = bureaucrat_positioned_term
				years = 4
			}
			if = {
				limit = {
					NOT = { has_character_modifier = bureaucrat_positioned_term }
				}
				if = {
					limit = { scope:title.tier = tier_county }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = scholastics
						value = { 8 15 }
					}
				}
				else_if = {
					limit = { scope:title.tier = tier_duchy }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = scholastics
						value = { 9 25 }
					}
				}
			}
		}
		if = {
			limit = {
				NOT = { has_character_modifier = bureaucrat_positioned_term }
			}
			add_character_modifier = {
				modifier = bureaucrat_positioned_term
				years = 3
			}
		}
		if = {
			limit = { NOT = { has_trait = lifestyle_bureaucrat } }
			add_trait = lifestyle_bureaucrat
			add_trait_xp = {
				trait = lifestyle_bureaucrat
				track = seniority
				value = highest_held_title_tier
			}
		}
		root = {
			save_east_contract_effect = yes
		}
		#如果该官员是因为升迁获得的头衔，交接掉原有头衔
		every_held_title = { 
			limit = {
				#不会替补掉同级头衔
				tier <= scope:title.tier
				tier > tier_barony
				#不会替补掉自己的办公首府
				trigger_if = {
					limit = { exists = root.capital_county }
					NOT = { this = root.capital_county }
				}
				#不在法理的的头衔要交出
				OR = {
					NOT = { target_is_de_jure_liege_or_above = scope:title }
					NOT = { root.capital_county = { target_is_de_jure_liege_or_above = prev } }
				}
			}
			add_to_list = list_old_titles
		}
		capital_province = {
			save_scope_as = capital_province
		}
		if = {
			limit = { 
				exists = scope:capital_province
			}
			if = {
				limit = { has_variable = oe_heir }
				var:oe_heir = { save_scope_as = lucky }
			}
			else_if = {
				limit = {
					any_pool_character = {
						province = scope:capital_province
						is_capable_adult = yes
						is_imprisoned = no
						is_oe_available_ai_at_peace = yes
						has_trait = lifestyle_bureaucrat
					}
				}
				random_pool_character = {
					province = scope:capital_province
					limit = {
						is_capable_adult = yes
						is_imprisoned = no
						is_oe_available_ai_at_peace = yes
						has_trait = lifestyle_bureaucrat
					}
					save_scope_as = lucky
				}
			}
			else = {
				random_pool_character = {
					province = root.top_liege.capital_county.title_province
					limit = {
						is_landed = no
						is_capable_adult = yes
						is_imprisoned = no
						is_oe_available_ai_at_peace = yes
						NOT = { dynasty = root.top_liege.dynasty }
						OR = {
							has_trait = lifestyle_bureaucrat
							has_trait = jinshi
						}
						is_male = yes
					}
					save_scope_as = lucky
				}
			}
			#如果找到合适的人选的话……
			if = {
				limit = { 
					exists = scope:lucky 
				}
				#开始交接
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change2
					add_claim_on_loss = no
				}
				scope:old_title = {
					change_title_holder_include_vassals = {
						holder = scope:lucky
						change = scope:change2
						take_baronies = no
						government_base = root
					}
				}
				scope:lucky = { 
					if = {
						limit = { is_landed = yes }
						inter_east_contract_effect = yes
					}
					if = {
						limit = {
							NOT = { has_character_modifier = bureaucrat_positioned_term }
						}
						add_character_modifier = {
							modifier = bureaucrat_positioned_term
							years = 2
						}
					}
					if = {
						limit = {
							scope:old_title.de_jure_liege = { exists = holder }
						}
						change_liege = {
							liege = scope:old_title.de_jure_liege.holder
							change = scope:change2
						}
					}
					else = {
						change_liege = {
							liege = top_liege
							change = scope:change2
						}
					}
				}
				resolve_title_and_vassal_change = scope:change2
				scope:lucky = {
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
						add_random_tiered_trait_track_xp_effect = {
							TRAIT = lifestyle_bureaucrat
							TRACK = scholastics
							LEVEL_1 = yes
							LEVEL_3 = no
						}
						add_random_tiered_trait_track_xp_effect = {
							TRAIT = lifestyle_bureaucrat
							TRACK = accomplishments
							LEVEL_1 = yes
							LEVEL_3 = no
						}
						add_random_tiered_trait_track_xp_effect = {
							TRAIT = lifestyle_bureaucrat
							TRACK = sociability
							LEVEL_1 = yes
							LEVEL_3 = no
						}
						add_random_tiered_trait_track_xp_effect = {
							TRAIT = lifestyle_bureaucrat
							TRACK = seniority
							LEVEL_1 = yes
							LEVEL_3 = no
						}
					}
				}
			}
		}
		every_vassal = {
			limit = {
				#NOT = { primary_title.de_jure_liege = scope:title }
				NOT = { primary_title.de_jure_liege = { holder = root } }
			}
			save_scope_as = old_vassals
		}
		if = {
			limit = { 
				exists = scope:old_vassals
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = no
			}
			scope:old_vassals = {
				if = {
					limit = {
						primary_title.de_jure_liege = { exists = holder }
					}
					change_liege = {
						liege = primary_title.de_jure_liege.holder
						change = scope:change
					}
				}
				else = {
					change_liege = {
						liege = top_liege
						change = scope:change
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		#清理高官阶的廷臣
		#if = {
			#limit = {
				#any_courtier = {
					#has_trait = lifestyle_bureaucrat
				#}
			#}
			#save_scope_as = liege
			#every_courtier = {
				#limit = {
					#has_trait = lifestyle_bureaucrat
					#is_landed = no
					#bureaucrat_level_value > root.bureaucrat_level_value
					#courtier_allowed_to_leave_trigger = yes
					#is_oe_available_ai_at_peace = yes
				#}
				#move_to_pool_at = scope:liege.capital_county.title_province
			#}
		#}
	}
}


on_death = {
	on_actions = {
		BureaucracyEmpire_succession_pulse
	}
}
BureaucracyEmpire_succession_pulse = {
	trigger = {
		has_realm_law = player_official_succession_law
	}
	effect = {
		add_character_flag = { flag = about_to_die_but_not_dead_yet_flag } # Used in perk calc
		if = {
			limit = {
				exists = player_heir
				player_heir = {
					is_landed = yes
				}
			}
			set_designated_heir = player_heir
		}
		else_if = {
			limit = {
				exists = primary_heir
				primary_heir = {
					is_landed = yes
				}
			}
			set_designated_heir = player_heir
		}
		else_if = {
			limit = {
				any_child = {
					is_landed = yes
				}
			}
			random_child = {
				limit = {
					is_landed = yes
				}
				save_scope_as = heir
			}
			
			set_player_character = scope:heir
		}
		else_if = {
			limit = {
				any_close_family_member = {
					has_trait = lifestyle_bureaucrat
					is_landed = yes
				}
			}
			random_close_family_member = {
				limit = {
					has_trait = lifestyle_bureaucrat
					is_landed = yes
				}
				save_scope_as = heir
			}
			
			set_player_character = scope:heir
		}
		else = {
			random_close_or_extended_family_member = {
				limit = {
					has_trait = lifestyle_bureaucrat
					is_landed = yes
				}
				save_scope_as = heir
			}
			if = {
				limit = { exists = scope:heir }
				set_player_character = scope:heir
			}						
		}
	}
}

BureaucracyEmpire_ai_succession_pulse = {
	trigger = {
		scope:title.tier > tier_barony
		is_oe_landed_bureaucrat_trigger = yes #暂时接班的ai
		is_oe_available = yes
		is_ai = yes
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:usurped #篡夺头衔
		}
	}
	effect = {
		if = {
			limit = {
				scope:previous_holder = { exists = var:oe_heir }
			}
			scope:previous_holder = { var:oe_heir = { save_scope_as = heir } }
			create_title_and_vassal_change = {
				type = returned
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_held_title = {
				change_title_holder_include_vassals = {
					holder = scope:heir
					change = scope:change
				}
				root = { remove_claim = prev }
			}

			resolve_title_and_vassal_change = scope:change

			if = {
				limit = { scope:heir = { is_landed = yes } }
				scope:heir = {
					inter_east_contract_effect = yes
					if = {
						limit = {
							NOT = { has_character_modifier = bureaucrat_positioned_term }
						}
						add_character_modifier = {
							modifier = bureaucrat_positioned_term
							years = 2
						}
					}
				}
			}			
		}
	}
}

#丁忧  改旅行守孝CD继承
#BureaucracyEmpire_family_pulse = {
#	trigger = {
#		culture = { has_cultural_tradition = tradition_chinese_succession }	
#		NOT = { is_oe_imperial_court_trigger = yes }
#	}
#	effect = {
#		if = {
#			limit = {
#				any_child = {
#					is_oe_landed_bureaucrat_trigger = yes
#					is_ai = yes
#					count >= 1
#					is_alive = yes
#				}
#			}
#			save_scope_as = bureaucrat_parent
#			every_child = {
#				limit = {
#					is_oe_landed_bureaucrat_trigger = yes
#					is_oe_available = yes
#					is_ai = yes
#				}
#				save_scope_as = bureaucrat
#				save_east_contract_effect = yes
#				depose = yes
#				move_to_pool_at = scope:bureaucrat_parent.location
#			}
#		}
#	}
#}

#叙迁旅行
bureaucracy_start = {
	events = {
		bureaucracy.0010
	}
}

#战功
on_join_war_as_secondary = {
	on_actions = {
		accomplishments_medium_effects
	}
}
accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				NOT = { has_trait = lifestyle_bureaucrat }
				is_oe_landed_bureaucrat_trigger = yes
			}
			add_trait = lifestyle_bureaucrat
		}
		if = {
			limit = {
				has_trait = lifestyle_bureaucrat
				is_oe_landed_bureaucrat_trigger = yes
				scope:war.primary_attacker = top_liege
			}
			add_trait_xp = {
				trait = lifestyle_bureaucrat
				track = accomplishments
				value = { 3 7 }
			}
		}
	}
}
on_war_won_attacker = {
	on_actions = {
		attacker_accomplishments_medium_effects
	}
}
attacker_accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				scope:attacker = {
					NOT = { has_trait = lifestyle_bureaucrat }
					is_oe_landed_bureaucrat_trigger = yes
				}
			}
			scope:attacker = {
				add_trait = lifestyle_bureaucrat
			}
		}
		if = {
			limit = {
				scope:attacker = {
					has_trait = lifestyle_bureaucrat
					is_oe_landed_bureaucrat_trigger = yes
				}
				NOR = {
					scope:defender = scope:attacker.liege
					scope:defender = scope:attacker.top_liege
					scope:defender.top_liege = scope:attacker.top_liege
				}
			}
			scope:attacker = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = { 3 7 }
				}
			}
		}
	}
}
on_war_won_defender = {
	on_actions = {
		defender_accomplishments_medium_effects
	}
}
defender_accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				scope:defender = {
					NOT = { has_trait = lifestyle_bureaucrat }
					is_oe_landed_bureaucrat_trigger = yes
				}
			}
			scope:defender = {
				add_trait = lifestyle_bureaucrat
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_trait = lifestyle_bureaucrat
					is_oe_landed_bureaucrat_trigger = yes
					NOR = {
						scope:defender.liege = scope:attacker
						scope:defender.top_liege = scope:attacker
					}
				}
			}
			scope:defender = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = { 3 7 }
				}
			}
		}
	}
}
#勋位战功
on_accolade_rank_change = {
	on_actions = {
		accolade_accomplishments_small_effects
	}
}
accolade_accomplishments_small_effects = {
	effect = {
		save_scope_as = changing_accolade
		accolade_owner = {
			if = {
				limit = {
					scope:positive = yes
					has_dlc_feature = accolades
				}
				if = {
					limit = {					
						is_oe_landed_bureaucrat_trigger = yes
					}
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
					}				
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = { 3 5 }
					}
				}
			}
		}
	}
}
#基建
on_building_completed = {
	on_actions = {
		building_accomplishments_medium_effects
	}
}
building_accomplishments_medium_effects = {
	effect = {
		root = {
			if = {
				limit = {
					county.holder = {
						has_trait = lifestyle_bureaucrat
						is_oe_landed_bureaucrat_trigger = yes
					}
					county = county.holder.capital_county
				}
				county.holder = {
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = { 3 7 }
					}
				}
			}
			if = {
				limit = {
					barony.holder = {
						NOT = { has_trait = lifestyle_bureaucrat }
						is_oe_landed_bureaucrat_trigger = yes
					}
				}
				barony.holder = {
					add_trait = lifestyle_bureaucrat
				}
			}
		}
	}
}
#传教
on_county_faith_change = {
	on_actions = {
		faith_scholastics_medium_effects
	}
}
faith_scholastics_medium_effects = {
	effect = {
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat is_oe_landed_bureaucrat_trigger = yes }
				#NOT = { scope:old_faith = holder.top_liege.faith }
				root.faith = holder.top_liege.faith
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = scholastics
					value = { 8 15 }
				}
			}
		}
	}
}
#文化
on_county_culture_change = {
	on_actions = {
		culture_scholastics_medium_effects
	}
}
culture_scholastics_medium_effects = {
	effect = {
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat is_oe_landed_bureaucrat_trigger = yes }
				#NOT = { scope:old_culture = holder.top_liege.culture }
				root.culture = holder.top_liege.culture
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = scholastics
					value = { 8 15 }
				}
			}
		}
	}
}
#发展度
development_accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat is_oe_landed_bureaucrat_trigger = yes }
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = { 3 5 }
				}
			}
		}
	}
}
#旅行
#on_travel_plan_complete = {
#	on_actions = {
#		lifestyle_bureaucrat_sociability_effects
#	} 
#}
petition_liege_start = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	} 
}
pay_homage_start = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	} 
}
lifestyle_bureaucrat_sociability_effects = {
	trigger = {
		has_trait = lifestyle_bureaucrat
		is_oe_landed_bureaucrat_trigger = yes
	}
	effect = {
		if = {
			limit = { has_trait = lifestyle_bureaucrat }
			add_trait_xp = {
				trait = lifestyle_bureaucrat
				track = sociability
				value = { 3 5 }
			}
		}
	}
}

#TODO 科举 之后上学