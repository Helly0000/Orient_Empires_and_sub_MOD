#获得头衔时触发
# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
# scope:transfer_type 的可用类型
# flag:conquest 
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

on_title_gain = { #内核触发，只做接口，尽量不要动
	on_actions = {
		BureaucracyEmpire_on_title_gain
	}
}
BureaucracyEmpire_on_title_gain = {
	trigger = {
		#在天朝体制下
		top_liege = {
			is_oe_imperial_official_trigger = yes
		}
		has_realm_law = official_succession_law
		#伯爵级以上
		AND = {
			highest_held_title_tier >= tier_county
			highest_held_title_tier <= tier_kingdom
			NOT = { has_trait = peasant_leader }
			is_independent_ruler = no
		}
	}
	on_actions = {
		delay = { days = 10 }
		BureaucracyEmpire_on_title_gain_inheritance #官僚制帝国MOD，角色继承头衔时触发
		#BureaucracyEmpire_on_title_gain_granted #官僚制帝国MOD，角色被授予头衔时触发
	}
}

#官僚制帝国MOD，角色继承头衔时触发
BureaucracyEmpire_on_title_gain_inheritance = {
	trigger = { 
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:granted #被授予头衔
			scope:transfer_type = flag:usurped #篡夺头衔
		}
		is_independent_ruler = no
		#liege = { NOT = { is_corps_government_trigger = yes } }
	}
	effect = { 
		#不是继承，而是选择一个新的官员继任
		if = {
			limit = {
				exists = var:oe_heir
				var:oe_heir = {
					OR = {
						AND = {
							exists = scope:temp_holder.primary_title
							highest_held_title_tier < scope:temp_holder.primary_title.tier
							#is_available_adult = yes
						}
						AND = {
							#courtier_allowed_to_leave_trigger = yes
							is_ruler = no
						}					
					}	
				}
			}
			var:oe_heir = {
				save_scope_as = lucky
			}
			set_designated_heir = scope:lucky
		}
		else = {
			BureaucracyEmpire_bureaucracy_success_effect = {
				TITLE = root.primary_title#TITLE是被继任的头衔
				TEMP_HOLDER = root #TEMP_HOLDER是目前临时持有头衔的人，一般是死去的官员的孩子。用于正常交接
			}	
		}
		trigger_event = bureaucracy.0002  
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = { 		
					exists = var:oe_heir
				}
				root = scope:previous_holder.var:oe_heir 
			}
			scope:previous_holder = {
				remove_variable = oe_heir
				remove_claim = scope:title
			}
		}
		#确定任期
		#if = {
			#limit = {
				#exists = global_var:Bureaucracy_Manager_term
			#}
			#set_variable = {
				#name = Bureaucracy_term
				#value = global_var:Bureaucracy_Manager_term
			#}
		#}
	}
}
on_death = { #内核触发，只做接口，尽量不要动
	on_actions = {
		BureaucracyEmpire_on_death_inter
	}
}
BureaucracyEmpire_on_death_inter = {
	trigger = {
		#在天朝体制下
		exists = top_liege
		top_liege = { #报错点
			is_oe_imperial_official_trigger = yes
		}
		has_realm_law = official_succession_law
		#伯爵级以上
		AND = {
			highest_held_title_tier >= tier_county
			highest_held_title_tier <= tier_kingdom
			NOT = { has_trait = peasant_leader }
			is_independent_ruler = no
		}
	}
	effect = { 
		#不是继承，而是选择一个新的官员继任 
		if = {
			limit = {
				exists = var:oe_heir
				exists = scope:temp_holder			
				var:oe_heir = {
					target_is_liege_or_above = scope:temp_holder.top_liege #国内角色				
					OR = {
						AND = {
							exists = scope:temp_holder.primary_title
							highest_held_title_tier < scope:temp_holder.primary_title.tier
							is_available_adult = yes
						}
						AND = {
							courtier_allowed_to_leave_trigger = yes
							is_ruler = no
						}	
					}	
				}
			}
			var:oe_heir = {
				save_scope_as = lucky
			}
			set_designated_heir = scope:lucky
		}
		else = {
			BureaucracyEmpire_bureaucracy_success_effect = {
				TITLE = root.primary_title #TITLE是被继任的头衔
				TEMP_HOLDER = root #TEMP_HOLDER是目前临时持有头衔的人，一般是死去的官员的孩子。用于正常交接
			}
		}
		if = {
			limit = {
				exists = scope:lucky
				scope:lucky = { 
					is_ruler = yes #修改写法
					is_ai = yes
				}				
			}
			scope:lucky = {
				depose = yes
			}
			top_liege = {
				recruit_courtier = scope:lucky
			}
		}		
	}
}
on_title_lost = { #内核触发，只做接口，尽量不要动
	on_actions = {
		BureaucracyEmpire_on_title_lost
	}
}
BureaucracyEmpire_on_title_lost = {
	trigger = {
		#伯爵级以上
		AND = {
			highest_held_title_tier >= tier_county
			highest_held_title_tier <= tier_kingdom
			NOT = { has_trait = peasant_leader }
			is_independent_ruler = no
		}
		#在天朝体制下
		exists = top_liege
		top_liege = {
			is_oe_imperial_official_trigger = yes
		}
		#has_primary_title = scope:title #修改
		has_realm_law = official_succession_law
		scope:transfer_type = flag:abdication
	}
	effect = { 
		if = {
			limit = {
				exists = var:oe_heir
				var:oe_heir = {
					target_is_liege_or_above = scope:temp_holder.top_liege #国内角色					
					OR = {
						AND = {
							exists = scope:temp_holder.primary_title
							highest_held_title_tier < scope:temp_holder.primary_title.tier						
							is_available_adult = yes
						}
						AND = {
							courtier_allowed_to_leave_trigger = yes
							is_ruler = no
						}
					}	
				}
			}
			var:oe_heir = {
				save_scope_as = lucky
			}
			set_designated_heir = scope:lucky
			
			if = {
				limit = {
					exists = scope:lucky
					scope:lucky = { 
						is_ruler = yes
						is_ai = yes
					}
				}
				scope:lucky = {
					depose = yes
				}
				top_liege = {
					recruit_courtier = scope:lucky
				}
				set_employer = scope:lucky.top_liege ##t
			}
		}
		else = {
			BureaucracyEmpire_bureaucracy_success_effect = {
				TITLE = root.primary_title #TITLE是被继任的头衔
				TEMP_HOLDER = root #TEMP_HOLDER是目前临时持有头衔的人，一般是死去的官员的孩子。用于正常交接
			}
		}
		#旧写法	
		#scope:lucky = { 
			#if = { 
				#limit = { 
					#is_ruler = yes
				#}
				#depose = yes
				## 辞任官员成为皇帝廷臣
				#top_liege = {
					#recruit_courtier = scope:lucky
				#}
				##set_employer = scope:lucky.top_liege
			#}
		#}
	}
}
three_year_playable_pulse = {
	on_actions = {
		BureaucracyEmpire_on_yearly_playable_pulse
		BureaucracyEmpire_clear_on_yearly_playable_pulse
	}
}

BureaucracyEmpire_on_yearly_playable_pulse = {
	trigger = {
		#在天朝体制下
		is_independent_ruler = no
		top_liege = {
			is_oe_imperial_official_trigger = yes
		}
		has_realm_law = official_succession_law
		#伯爵级以上
		AND = {
			highest_held_title_tier >= tier_county
			highest_held_title_tier <= tier_kingdom
			NOT = { has_trait = peasant_leader }
			NOT = { is_at_war_with = top_liege }
		}
		exists = primary_title		
	}
	effect = { 
		#不是继承，而是选择一个新的官员继任 
		if = {
			limit = {
				exists = var:oe_heir
				var:oe_heir = {
					target_is_liege_or_above = scope:temp_holder.top_liege #国内角色					
					OR = {
						AND = {
							exists = scope:temp_holder.primary_title
							highest_held_title_tier < scope:temp_holder.primary_title.tier
							#is_available_adult = yes
						}
						AND = {							
							#courtier_allowed_to_leave_trigger = yes
							is_ruler = no
						}
					}	
				}
			}
			var:oe_heir = {
				save_scope_as = lucky
			}
			set_designated_heir = scope:lucky
		}
		else = {
			BureaucracyEmpire_bureaucracy_success_effect = { #报错点
				TITLE = root.primary_title #TITLE是被继任的头衔
				TEMP_HOLDER = root #TEMP_HOLDER是目前临时持有头衔的人，一般是死去的官员的孩子。用于正常交接
			}
		}
#		if = {
#			limit = {
#				exists = var:Bureaucracy_term
#			}
#			change_variable = {
#				name = Bureaucracy_term
#				add = -1
#			}
#			if = {
#				limit = {
#					is_ai = yes
#					var:Bureaucracy_term <= 0
#				}
#				root.liege = {
#					save_scope_as = new_owner
#				}
#				depose = yes
#				scope:new_owner = {
#					recruit_courtier = root
#				}
#			}	
#		}		
	}
}

BureaucracyEmpire_clear_on_yearly_playable_pulse = {
	trigger = {
		is_independent_ruler = yes
		has_government = imperial_government
		has_realm_law = tradition_succession_law
		highest_held_title_tier <= tier_duchy
		NOR = {
			primary_title = { has_title_law = steppe_elective_succession_law }
		}
		exists = primary_heir
		primary_heir = { NOT = { dynasty = root.dynasty } }	
	}
	effect = {
		if = {
			limit = {
				any_child = {
					count >= 1
					character_gender_can_inherit_from_trigger = { CHARACTER = root }
				}
			}
			random_child = {
				limit = {
					character_gender_can_inherit_from_trigger = { CHARACTER = root }
				}
				save_scope_as = preferred_heir
			}
		}
		else_if = {
			limit = {
				any_close_family_member = {
					count >= 1
					character_gender_can_inherit_from_trigger = { CHARACTER = root }
				}
			}
			random_close_family_member = {
				limit = {
					character_gender_can_inherit_from_trigger = { CHARACTER = root }
				}
				save_scope_as = preferred_heir
			}
		}
		else = {
			random_courtier = {
				limit = {
					is_available_adult = yes
					character_gender_can_inherit_from_trigger = { CHARACTER = root }
				}
				save_scope_as = preferred_heir
			}
		}
		set_designated_heir = scope:preferred_heir	
	}
}