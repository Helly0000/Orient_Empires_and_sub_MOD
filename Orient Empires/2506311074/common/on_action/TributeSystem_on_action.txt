############# TributeSystem_on_action
# by 往来天地间 WangLaiTianDiJian
# TributeSystem

#WLTDJ20220116

on_game_start_after_lobby = {
    on_actions = {
		TributeSystem_check_effects
    }
}

TributeSystem_check_effects = {
	effect = {
		every_ruler = {
			if = {
            	limit = {
					exists = var:my_suzerain
					exists = var:tributary_type
            	}
            	if = {
                	limit = {
                    	is_permanent_tributary = yes
                	}
					var:my_suzerain = {
						add_to_variable_list = {
							name = permanent_tributaries
							target = prev
						}
					}       
            	}
            	else_if = {
                	limit = {
                    	is_non_permanent_tributary = yes
                	}
					var:my_suzerain = {
						add_to_variable_list = {
							name = non_permanent_tributaries
							target = prev
						}
					}       
            	}
				var:my_suzerain = {
					add_to_variable_list = {
						name = all_tributaries
						target = prev
					}
				}
        	}
		}
    }
}

on_title_gain_inheritance = {
	on_actions = {
		TributeSystem_succession_effects
	}
}
TributeSystem_succession_effects = {
	trigger = {
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:usurped #篡夺头衔
		}
		scope:title = primary_title
	}
    effect = {
        if = { #宗主国换代
            limit = {
				scope:previous_holder = {
					has_tributaries = yes
				}
            }
			#Copy old Ruler tributaries list to his primary heir (on_death)
			#Root is old ruler
			scope:previous_holder = {
				every_in_list = {
					variable = permanent_tributaries
					if = {
						limit = { is_alive = yes }
						save_scope_as = tributary_succ_var
					}
					#set_variable = { 
					   #name = tributary_succ_var
					   #value = this
					#}
					if = {
						limit = {
							exists = scope:tributary_succ_var
							root = { TributeSystem_can_be_suzerain_of_trigger = { TRIBUTARY = scope:tributary_succ_var } }						
							NOT = { root = { has_relation_tributary = scope:tributary_succ_var } }
						}
						make_tributary = {
							SUZERAIN = root
							TRIBUTARY = scope:tributary_succ_var
							TYPE = tributary_permanent
						}
					}
					#remove_variable = tributary_succ_var
				}
				every_in_list = {
					variable = non_permanent_tributaries
					if = {
						limit = { is_alive = yes }
						save_scope_as = scope:tributary_succ_var_np
					}
					#set_variable = { 
						#name = tributary_succ_var_np
						#value = this
					#}
					if = {
						limit = { exists = scope:tributary_succ_var_np }
						unset_tributary = {
							TRIBUTARY = scope:tributary_succ_var_np
						}
					}
					#remove_variable = tributary_succ_var_np
				}	
			}
        }
        else_if = { #朝贡国换代
            limit = {
				scope:previous_holder = {
					exists = var:my_suzerain
				}
            }
			#give the heir var:my_suzerain
			#Root is old tributary
			scope:previous_holder = {
				if = {
					limit = {
						is_permanent_tributary = yes
					}
					var:my_suzerain = { save_scope_as = suzerain }
					make_tributary = {
						SUZERAIN = scope:suzerain
						TRIBUTARY = root
						TYPE = tributary_permanent
					}
				}
				#else_if = {
					#limit = {
						#is_non_permanent_tributary = yes
					#}
					#unset_tributary = {
						#TRIBUTARY = scope:previous_holder
					#}
				#}
			}
        }
		TributeSystem_suzerain_validity_check_effect = yes	
    }
}

on_title_lost = {
    on_actions = {
        TributeSystem_on_title_lost
    }
}

TributeSystem_on_title_lost = {
	trigger = {
		OR = {
			scope:title = primary_title
			scope:title.tier > highest_held_title_tier
			highest_held_title_tier = tier_barony
			is_landed = no
		}
	}
    effect = {
		if = {
			limit = { exists = var:my_suzerain var:my_suzerain = { is_alive = yes } } #朝贡国失国
			var:my_suzerain = { save_scope_as = suzerain }
			remove_relation_suzerain = scope:suzerain	
			unset_tributary = {
				TRIBUTARY = root
			}
		}
		if = {
			limit = { has_tributaries = yes } #宗主国失国
			every_relation = {
				type = tributary
				save_scope_as = tributary
			}
			if = {
				limit = { exists = scope:tributary }
				remove_relation_tributary = scope:tributary
				unset_tributary = {
					TRIBUTARY = scope:tributary
				}
			}
		}
		TributeSystem_suzerain_validity_check_effect = yes
    }
}

on_vassal_gained = {
	on_actions = {
        TributeSystem_on_vassal_gained  #附庸解除朝贡
    }
}
TributeSystem_on_vassal_gained = {
	effect = {
		#朝贡国被附庸
		if = { 
			limit = {
				NOT = { exists = scope:old_liege }
				scope:vassal = { exists = var:my_suzerain }
			}
			scope:vassal = { var:my_suzerain = { save_scope_as = my_suzerain } }
			unset_tributary = {
				TRIBUTARY = scope:vassal
			}
		}
		#宗主国被附庸
		if = { 
			limit = {
				NOT = { exists = scope:old_liege }
				scope:vassal = { has_tributaries = yes }
			}
			scope:vassal = {
				every_relation = {
					type = tributary
					limit = { exists = var:my_suzerain }
					save_scope_as = tributary
				}
				if = {
					limit = { exists = scope:tributary }
					unset_tributary = {
						TRIBUTARY = scope:tributary
					}
				}
			}
		}
		TributeSystem_suzerain_validity_check_effect = yes
	}
}


on_rank_up = { # Will not fire during history execution or for dying characters
	on_actions = {
		TributeSystem_on_rank_change
	}
}
on_rank_down = { # Will not fire during history execution or for dying characters
	on_actions = {
		TributeSystem_on_rank_change
	}
}
TributeSystem_on_rank_change = {
	trigger = {
		OR = {
			exists = var:my_suzerain
			has_trait = suzerain
		}
	}
	effect = {
		#朝贡国等级变化
		if = {
			limit = {
				exists = var:my_suzerain
				tier_difference = {
					target = var:my_suzerain
					value >= 0
				}
			}
			var:my_suzerain = { save_scope_as = my_suzerain }
			unset_tributary = { TRIBUTARY = root }
		}
		#宗主国等级变化
		if = {
			limit = {
				has_tributaries = yes
			}
			every_relation = {
				type = tributary
				limit = { exists = this is_alive = yes }
				save_scope_as = tributary
			}
			if = {
				limit = {
					exists = scope:tributary
					tier_difference = {
						target = scope:tributary
						value < 0
					}
				}
				unset_tributary = { TRIBUTARY = scope:tributary }
			}
		}
		TributeSystem_suzerain_validity_check_effect = yes
	}
}

yearly_global_pulse = {
	on_actions = {
		TributeSystem_yearly_tribute_on_action
		TributeSystem_all_at_year_start_on_action
	}
}
TributeSystem_yearly_tribute_on_action = {
	effect = {
		every_ruler = {
			if = {
				limit = {
					has_character_modifier = offer_income_modifier
				}
				change_tribute_exp_effect = { EXP = var:offer_income }
				if = {
					limit = {
						exists = var:monthly_income_scale
						exists = var:yearly_income_recipient
					}
					pay_short_term_gold = {
						gold = {
							value = monthly_character_income
							multiply = var:monthly_income_scal
						}
						target = var:yearly_income_recipient
					}
				}				
			}
			if = {
				limit = {
					exists = var:suzerain
					is_ai = yes
					var:suzerain = { is_ai = yes }
				}
				#save_temporary_scope_as = tributary
	
				random = {
					chance = 50
					change_tribute_exp_effect = { EXP = 2 }
				}
				random = {
					chance = 10
					change_tribute_exp_effect = { EXP = 5 }
				}
				random = {
					chance = 10
					change_tribute_exp_effect = { EXP = -2 }
				}
				every_relation = {
					type = suzerain
					limit = { is_ai = yes }
					#save_temporary_scope_as = suzerain
					
					random = {
						chance = 70
						change_tribute_exp_effect = { EXP = 2 }
					}
					random = {
						chance = 10
						change_tribute_exp_effect = { EXP = 3 }
					}
					random = {
						chance = 10
						change_tribute_exp_effect = { EXP = -3 }
					}	
				}
	
				TributeSystem_tribute_relation_validity_check_effect = { SUZERAIN = scope:suzerain TRIBUTARY = scope:tributary }
			}
		}
	}
}

TributeSystem_all_at_year_start_on_action = {
	effect = {
		every_ruler = {
			if = {
				limit = {
					is_tributary = yes
					#can_be_tributary_trigger = yes
				}
				save_temporary_scope_as = tributary
				every_relation = {
					type = suzerain
					#limit = { can_be_suzerain_trigger = yes }
					save_temporary_scope_as = suzerain
					TributeSystem_tribute_relation_validity_check_effect = { SUZERAIN = scope:suzerain TRIBUTARY = scope:tributary }
				}
			}
			else_if = {
				limit = {
					is_suzerain = yes
					#can_be_suzerain_trigger = yes
				}
				save_temporary_scope_as = suzerain
				every_relation = {
					type = tributary
					#limit = { can_be_tributary_trigger = yes }
					save_temporary_scope_as = tributary
					TributeSystem_tribute_relation_validity_check_effect = { SUZERAIN = scope:suzerain TRIBUTARY = scope:tributary }
				}
			}
		}
	}
}

#The initiator is ROOT, the other character is scope:target.
#For two-way relations, the on-action only fires on the initiator. Including if the corresponding relation is a different one (E.G., mentor vs. student)

#on_set_relation_tributary = {
#}
#on_set_relation_suzerain = {
#}
#on_remove_relation_tributary = {
#}
#on_remove_relation_suzerain = {	
#}

on_war_started = {
	on_actions = {
		TributeSystem_on_war_started
	}
}

TributeSystem_on_war_started = {
	effect = {
		if = {
			limit = {
				scope:war = {
					NOT = {
						using_cb = free_from_tributary_cb
					}
				}
				OR = {
					scope:attacker = { has_relation_suzerain = scope:defender }
					scope:attacker = { has_relation_tributary = scope:defender }
				}
			}
			if = {
				limit = { scope:attacker = { has_relation_tributary = scope:defender } }
				scope:attacker = {
					unset_tributary = {
						TRIBUTARY = scope:defender
					}
				}
			}
			if = {
				limit = { scope:attacker = { has_relation_suzerain = scope:defender } }
				scope:defender = {
					unset_tributary = {
						TRIBUTARY = scope:attacker
					}
				}
			}
			if = {
				limit = {
					scope:attacker = { has_character_modifier = offer_income_modifier }
				}
				scope:attacker = {
					remove_character_modifier = offer_income_modifier
					remove_variable = offer_income
				}
			}
			if = {
				limit = {
					scope:defender = {
						has_character_modifier = receive_income_modifier
						has_variable = receive_income_from
						var:receive_income_from = scope:attacker
					}
				}
				scope:defender = {
					remove_character_modifier = receive_income_modifier
					remove_variable = receive_income_from
				}
			}
			if = {
				limit = {
					scope:attacker = {
						has_character_modifier = receive_income_modifier
						has_variable = receive_income_from
						var:receive_income_from = scope:defender
					}
				}
				scope:attacker = {
					remove_character_modifier = receive_income_modifier
					remove_variable = receive_income_from
				}
			}
		}
	}
}