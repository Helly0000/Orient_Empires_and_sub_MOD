############# TributeSystem_on_action
# by 往来天地间 WangLaiTianDiJian
# TributeSystem

#WLTDJ20220116

on_title_gain_inheritance = {
	on_actions = {
		TributeSystem_succession_effects
	}
}
TributeSystem_succession_effects = {
	trigger = {
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:usurped #篡夺头衔
		}
		scope:title = primary_title
		NOT = { root = scope:previous_holder }
	}
    effect = {
        if = { #宗主国换代
            limit = {
				scope:previous_holder = {
					is_suzerain = yes
				}
            }
			scope:previous_holder = {
				every_relation = {
					type = tributary
					limit = {
						is_permanent_tributary = yes
					}
					save_scope_as = tributary
				}	
			}
			if = {
				limit = { exists = scope:tributary }
				make_tributary = {
					SUZERAIN = root
					TRIBUTARY = scope:tributary
					TYPE = tributary_permanent
				}
			}
        }
        else_if = { #朝贡国换代
            limit = {
				scope:previous_holder = {
					is_tributary = yes
					is_permanent_tributary = yes
				}
            }
			scope:previous_holder = {
				every_relation = {
					type = suzerain
					save_scope_as = suzerain
				}				
			}
			if = {
				limit = { exists = scope:suzerain }
				make_tributary = {
					SUZERAIN = scope:suzerain
					TRIBUTARY = root
					TYPE = tributary_permanent
				}
			}
        }
		TributeSystem_suzerain_validity_check_effect = yes
		TributeSystem_tributary_validity_check_effect = yes
    }
}

on_title_lost = {
    on_actions = {
        #TributeSystem_on_title_lost
    }
}

TributeSystem_on_title_lost = {
	trigger = {
		OR = {
			scope:title = primary_title
			scope:title.tier > highest_held_title_tier
			highest_held_title_tier = tier_barony
			is_landed = no
		}
	}
    effect = {
		if = {
			limit = { is_tributary = yes } #朝贡国失国
			unset_tributary = { TRIBUTARY = root }
		}
		if = {
			limit = { has_tributaries = yes } #宗主国失国
			every_relation = {
				type = tributary
				save_scope_as = tributary
			}
			unset_tributary = { TRIBUTARY = scope:tributary }
		}
		TributeSystem_suzerain_validity_check_effect = yes
		TributeSystem_tributary_validity_check_effect = yes
    }
}

on_vassal_gained = {
	on_actions = {
        #TributeSystem_on_vassal_gained  #附庸解除朝贡
    }
}
TributeSystem_on_vassal_gained = {
	trigger = {
		NOT = { exists = scope:old_liege }
	}
	effect = {
		#朝贡国被附庸
		if = { 
			limit = {		
				scope:vassal = { is_tributary = yes }
			}
			unset_tributary = {
				TRIBUTARY = scope:vassal
			}
		}
		#宗主国被附庸
		if = { 
			limit = {
				scope:vassal = { has_tributaries = yes }
			}
			scope:vassal = {
				every_relation = {
					type = tributary
					save_scope_as = tributary
				}
			}
			unset_tributary = { TRIBUTARY = scope:tributary }
		}
	}
}


on_rank_up = { # Will not fire during history execution or for dying characters
	on_actions = {
		#TributeSystem_on_rank_change
	}
}
on_rank_down = { # Will not fire during history execution or for dying characters
	on_actions = {
		#TributeSystem_on_rank_change
	}
}
TributeSystem_on_rank_change = {
	effect = {
		#朝贡国等级变化
		if = {
			limit = {
				exists = var:my_suzerain
				NOT = {
					any_relation = {
						type = suzerain
						can_be_suzerain_of = { TARGET = root }
					}
				}
			}
			unset_tributary = { TRIBUTARY = root }
		}
		#宗主国等级变化
		if = {
			limit = {
				has_tributaries = yes
			}
			every_relation = {
				type = tributary
				limit = {
					NOT = { can_be_tributary_of = { TARGET = root } }
				}
				save_scope_as = tributary
			}
			unset_tributary = { TRIBUTARY = scope:tributary }
		}
	}
}

yearly_global_pulse = {
	on_actions = {
		TributeSystem_yearly_tribute_on_action #岁币和点数自然增长
	}
}

TributeSystem_yearly_tribute_on_action = {
	effect = {
		every_ruler = {
			if = {
				limit = {
					has_character_modifier = offer_income_modifier
				}
				change_tribute_exp_effect = { EXP = var:offer_income }
				if = {
					limit = {
						exists = var:monthly_income_scale
						exists = var:yearly_income_recipient
					}
					pay_short_term_gold = {
						gold = {
							value = monthly_character_income
							multiply = var:monthly_income_scal
						}
						target = var:yearly_income_recipient
					}
				}				
			}
			if = {
				limit = {
					is_tributary = yes
					is_ai = yes
				}
				save_temporary_scope_as = tributary
				every_relation = {
					type = suzerain
					limit = { is_ai = yes }
					save_temporary_scope_as = suzerain
				}
				random = {
					chance = 50
					tributary_change_tribute_exp_effect = { EXP = 5 }
				}
				random = {
					chance = 50
					tributary_change_tribute_exp_effect = { EXP = 10 }
				}
				random = {
					chance = 10
					tributary_change_tribute_exp_effect = { EXP = -2 }
				}
				if = {
					limit = { exists = scope:suzerain }
					scope:suzerain = {
						random = {
							chance = 60
							change_tribute_exp_effect = { EXP = 1 }
						}
						random = {
							chance = 30
							change_tribute_exp_effect = { EXP = 3 }
						}
						random = {
							chance = 10
							suzerain_change_tribute_exp_effect = { EXP = -3 }
						}	
					}
				}

				#TributeSystem_tribute_relation_validity_check_effect = { SUZERAIN = scope:suzerain TRIBUTARY = scope:tributary }
			}
			
		}
	}
}

yearly_global_pulse = {
	on_actions = {
		TributeSystem_all_at_year_start_on_action #有效性校验
	}
}

TributeSystem_all_at_year_start_on_action = {
	effect = {
		every_ruler = {
			if = {
				limit = {
					is_tributary = yes
					#can_be_tributary_trigger = yes
				}
				save_temporary_scope_as = tributary
				every_relation = {
					type = suzerain
					#limit = { can_be_suzerain_trigger = yes }
					save_temporary_scope_as = suzerain
					TributeSystem_tribute_relation_validity_check_effect = { SUZERAIN = scope:suzerain TRIBUTARY = scope:tributary }
				}
			}
			else_if = {
				limit = {
					is_suzerain = yes
					#can_be_suzerain_trigger = yes
				}
				save_temporary_scope_as = suzerain
				every_relation = {
					type = tributary
					#limit = { can_be_tributary_trigger = yes }
					save_temporary_scope_as = tributary
					TributeSystem_tribute_relation_validity_check_effect = { SUZERAIN = scope:suzerain TRIBUTARY = scope:tributary }
				}
			}
			TributeSystem_suzerain_validity_check_effect = yes
			TributeSystem_tributary_validity_check_effect = yes
		}
	}
}

#The initiator is ROOT, the other character is scope:target.
#For two-way relations, the on-action only fires on the initiator. Including if the corresponding relation is a different one (E.G., mentor vs. student)

#Each scripted relation has several associated on-actions:
#- root = the relation owner ("source" of the relation)
#- scope:target = the relation target
#on_set_relation_tributary = {
#}
on_set_relation_suzerain = {
	effect = {
		root = {
			set_variable  = {
				name = my_suzerain
				value = scope:target
			}
		}
	}
}
#on_remove_relation_tributary = {
#}
on_remove_relation_suzerain = {
	effect = {
		TributeSystem_tributary_validity_check_effect = yes
		scope:target = {
			TributeSystem_suzerain_validity_check_effect = yes
		}
		change_color_back_effect = yes
	}
}

on_war_started = {
	on_actions = {
		TributeSystem_on_war_started
	}
}

TributeSystem_on_war_started = {
	effect = {
		if = {
			limit = {
				scope:war = {
					NOT = {
						using_cb = free_from_tributary_cb
					}
				}
				OR = {
					scope:attacker = { has_relation_suzerain = scope:defender }
					scope:attacker = { has_relation_tributary = scope:defender }
				}
			}
			if = {
				limit = { scope:attacker = { has_relation_tributary = scope:defender } }
				unset_tributary = {
					TRIBUTARY = scope:defender
				}
			}
			else_if = {
				limit = { scope:attacker = { has_relation_suzerain = scope:defender } }
				unset_tributary = {
					TRIBUTARY = scope:attacker
				}
			}
			if = {
				limit = {
					scope:attacker = { has_character_modifier = offer_income_modifier }
				}
				scope:attacker = {
					remove_character_modifier = offer_income_modifier
					remove_variable = offer_income
				}
			}
			if = {
				limit = {
					scope:defender = {
						has_character_modifier = receive_income_modifier
						has_variable = receive_income_from
						var:receive_income_from = scope:attacker
					}
				}
				scope:defender = {
					remove_character_modifier = receive_income_modifier
					remove_variable = receive_income_from
				}
			}
			if = {
				limit = {
					scope:attacker = {
						has_character_modifier = receive_income_modifier
						has_variable = receive_income_from
						var:receive_income_from = scope:defender
					}
				}
				scope:attacker = {
					remove_character_modifier = receive_income_modifier
					remove_variable = receive_income_from
				}
			}
		}
	}
}