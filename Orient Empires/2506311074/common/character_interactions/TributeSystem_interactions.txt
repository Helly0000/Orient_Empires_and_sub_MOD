############# TributeSystem_interactions
# by 往来天地间 WangLaiTianDiJian
# TributeSystem

#WLTDJ20211219
#游牧君重写20221230

#不让AI进行解除朝贡、贿赂成为附属国这类操作，一来增加运算量，二来这些操作都有可能对AI造成不利影响，削弱AI（例如要花钱、要承受撕破脸带来的好感度惩罚等）

#游牧君重写20230830


offer_tribute_interaction = {#请求成为朝贡国
	category = interaction_category_tribute
	icon = icon_vassal
	use_diplomatic_range = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	interface_priority = 60
	desc = TributeSystem_offer_tribute_desc	
	greeting = positive
	notification_text = TributeSystem_offer_tribute_notification
	
	is_shown = {
		NOR = {
			scope:recipient = scope:actor
			scope:actor = { has_relation_tributary = scope:recipient }
			scope:actor = { has_relation_suzerain = scope:recipient }
			scope:actor = { is_tributary = yes }
		}
		scope:actor = {
			TributeSystem_can_be_tributary_of_trigger = { SUZERAIN = scope:recipient }
		}
		scope:recipient = {
			TributeSystem_can_be_suzerain_of_trigger = { TRIBUTARY = scope:actor }
		}
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = { is_available_for_activity_trigger = yes }

		custom_description = {
			text = "TributeSystem_allegiance_offer_has_been_rejected"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = offer_tribute_refused_opinion
						target = scope:recipient
					}
				}
			}
		}
		
	}

	#send_option
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = offer_tribute_interaction
				}
			}
		}
	}

	#Non Permanent trib
	send_option = {										
		is_shown = {
			always = yes
		}
		flag = non_permanent_trib						# If selected then scope:flag_name will be set to yes
		localization = non_permanent_trib				# Loc_key for option label
		starts_enabled = { always = yes	}				# Trigger for whether this should be on when the window opens. If not defined, defaults to off

	}

	#Permanent trib
	send_option = {
		is_shown = {
			always = yes
		}
		flag = permanent_trib
		localization = permanent_trib	
	}

	send_options_exclusive = yes

	can_send_despite_rejection = yes

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1001
		}
	}
		
	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					scope:non_permanent_trib = yes
				}
				make_tributary = {
					TYPE = tributary_non_permanent
					SUZERAIN = scope:recipient
					TRIBUTARY = scope:actor
				}
			}
			else_if = {
				limit = {
					scope:permanent_trib = yes
				}
				make_tributary = {
					TYPE = tributary_permanent
					SUZERAIN = scope:recipient
					TRIBUTARY = scope:actor
				}
			}
		}

		scope:actor = {
			trigger_event = TributeSystem.1002
			stress_impact = {
				shy = minor_stress_impact_gain
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = TributeSystem.1003
		}
		scope:actor = {
			add_opinion = {
				modifier = offer_tribute_refused_opinion
				target = scope:recipient
			}
		}
	}

	auto_accept = {
	}
	
	ai_accept = { # Similar to Negotiate Alliance, but without modifiers for Liege, being an heir, etc.
		base = -50
		modifier = { # 永久朝贡国
			desc = game_concept_permanent_trib
			scope:permanent_trib = yes
			add = 50
		}
		modifier = {
			add = 150
			scope:actor.realm_size > scope:recipient.realm_size
			desc = will_accept_bigger_trib
		}
		modifier = {
			add = 50
			scope:actor.realm_size < scope:recipient.realm_size
			desc = will_accept_smaller_trib			
		}
		modifier = {
			scope:actor = {
				is_at_war = yes
			}
			factor = 0
			desc = do_not_want_to_fight_trib_war
		}	
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

		#以下照抄原版生活方式解锁的同盟谈判，同盟谈判基础接受度为-25
		#照抄原版开始
		# Tier Differences
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value >= 1
				}
			}
			add = {
				value = 30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 2
						}
					}
					add = 30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 3
						}
					}
					add = 60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 4
						}
					}
					add = 90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 5
						}
					}
					add = 120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value <= -1
				}
			}
			add = {
				value = -30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
					add = -30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -3
						}
					}
					add = -60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -4
						}
					}
					add = -90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -5
						}
					}
					add = -120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		opinion_modifier = { # More likely to accept if Recipient likes the Actor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}
		# Dynasty Prestige Levels
		modifier = {
			add = -5
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level = 0 }
		}
		modifier = {
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level >= 2 }
			add = {
				value = 10
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 3 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 4 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 5 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 6 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 7 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 8 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 9 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 10 }
					}
					add = 5
				}
			}
		}
		modifier = { #Faith compatibility
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value > faith_fully_accepted_level
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_astray_level
							}
						}
					}
					subtract = 20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 60
				}
			}
			desc = MARRY_DIFFERENT_FAITH_REASON
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
	  	  	add = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
				multiply = 10
	  		}
			desc = offer_vassalization_interaction_aibehavior_power_tt
		}
		# Recipient is a Claimant to Actor's titles.
		modifier = {
			scope:recipient = {
				any_claim = {
					holder = scope:actor
				}
			}
			add = {
				value = -200
				if = {
					limit = {
						NOT = {
							scope:recipient.house = scope:actor.house
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						NOT = {
							scope:recipient.dynasty = scope:actor.dynasty
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						scope:recipient.dynasty = scope:actor.dynasty
						OR = {
							has_trait = bastard
							has_trait = legitimized_bastard
						}
					}
					multiply = 1.5
				}
				if = { # Primary heir will probably inherit the lands after the rulers death
					limit = {
						scope:recipient = { is_primary_heir_of = scope:actor }
					}
					divide = 4
				}
			}
			desc = IS_CLAIMANT_TO_ACTORS_TITLES
		}
		#Actor has claims on recipient's titles.
		modifier = {
			scope:actor = {
				any_claim = {
					holder = scope:recipient
				}
			}
			add = 25
			desc = IS_CLAIMANT_TO_RECIPIENT_TITLES
		}
		modifier = {
			scope:recipient = {
				NOT = {
					any_claim = {
						holder = scope:actor
					}
				}
			}
			scope:recipient.house = scope:actor.house
			add = 15
			desc = IS_SAME_HOUSE_REASON
		}
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = declared_war
				}
			}
			add = -100
			desc = DECLARED_WAR_REASON
		}
	}
	# 照抄原版结束
	ai_potential = {
		is_at_war = no
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		max = 3
	}
	
	ai_frequency = 72
	
	ai_will_do = {
		base = -25
		
		modifier = {
	  	  	add = {
				value = scope:recipient.max_military_strength
				divide = { value = scope:actor.max_military_strength min = 1 }
				subtract = 1.5
				multiply = 50
	  		}
		}
		modifier = {
			scope:recipient.realm_size > scope:actor.realm_size
			add = 20
		}
		modifier = {
			scope:recipient.realm_size < scope:actor.realm_size
			factor = 0
		}
	}
	
}


demand_tribute_interaction = {#要求成为朝贡国
	category = interaction_category_tribute
	icon = icon_liege
	use_diplomatic_range = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	interface_priority = 60
	desc = TributeSystem_demand_tribute_desc
	
	greeting = positive
	notification_text = TributeSystem_demand_tribute_notification
	
	is_shown = {
		NOR = {
			scope:actor = scope:recipient
			scope:actor = { has_relation_tributary = scope:recipient }
			scope:actor = { has_relation_suzerain = scope:recipient }
		}
		scope:actor = {
			TributeSystem_can_be_suzerain_of_trigger = { TRIBUTARY = scope:recipient }
		}
		scope:recipient = {
			TributeSystem_can_be_tributary_of_trigger = { SUZERAIN = scope:actor }
		}
	}
	
	is_valid_showing_failures_only = {
				
		scope:recipient = { is_available_for_activity_trigger = yes }

		custom_description = {
			text = "TributeSystem_allegiance_demand_has_been_rejected"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = demand_tribute_refused_opinion
						target = scope:recipient
					}
				}
			}
		}
		
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = demand_tribute_interaction
				}
			}
		}
	}

	#Non Permanent trib
	send_option = {										
		is_shown = {
			always = yes
		}
		flag = non_permanent_trib						# If selected then scope:flag_name will be set to yes
		localization = non_permanent_trib				# Loc_key for option label
		starts_enabled = { always = yes	}				# Trigger for whether this should be on when the window opens. If not defined, defaults to off

	}

	#Permanent trib
	send_option = {
		is_shown = {
			always = yes
		}
		flag = permanent_trib
		localization = permanent_trib	
	}

	send_options_exclusive = yes

	can_send_despite_rejection = yes

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1004
		}
	}
		
	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					scope:non_permanent_trib = yes
				}
				make_tributary = {
					TYPE = tributary_non_permanent
					SUZERAIN = scope:actor
					TRIBUTARY = scope:recipient
				}
			}
			else_if = {
				limit = {
					scope:permanent_trib = yes
				}
				make_tributary = {
					TYPE = tributary_permanent
					SUZERAIN = scope:actor
					TRIBUTARY = scope:recipient
				}		
			}
		}
		scope:actor = {
			trigger_event = TributeSystem.1005

			stress_impact = {
				shy = minor_stress_impact_gain
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = TributeSystem.1006
		}
		scope:actor = {
			add_opinion = {
				modifier = demand_tribute_refused_opinion
				target = scope:recipient
			}
		}
	}

	auto_accept = {
	}
	
	ai_accept = { # Similar to Negotiate Alliance, but without modifiers for Liege, being an heir, etc.
		base = -50

		modifier = {
			add = -1000
			scope:actor.realm_size < scope:recipient.realm_size
			desc = will_not_accept_smaller_suzerain
		}
		modifier = {
			add = 50
			scope:actor.realm_size > scope:recipient.realm_size
			desc = will_accept_bigger_suzerain		
		}
		modifier = {
			scope:actor = {
				is_at_war = yes
			}
			factor = 0
			desc = do_not_want_to_fight_suzerain_war
		}	
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

		#以下照抄原版生活方式解锁的同盟谈判，同盟谈判基础接受度为-25
		#照抄原版开始
		# Tier Differences
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value >= 1
				}
			}
			add = {
				value = 30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 2
						}
					}
					add = 30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 3
						}
					}
					add = 60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 4
						}
					}
					add = 90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 5
						}
					}
					add = 120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value <= -1
				}
			}
			add = {
				value = -30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
					add = -30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -3
						}
					}
					add = -60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -4
						}
					}
					add = -90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -5
						}
					}
					add = -120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		opinion_modifier = { # More likely to accept if Recipient likes the Actor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}
		# Dynasty Prestige Levels
		modifier = {
			add = -5
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level = 0 }
		}
		modifier = {
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level >= 2 }
			add = {
				value = 10
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 3 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 4 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 5 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 6 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 7 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 8 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 9 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 10 }
					}
					add = 5
				}
			}
		}
		modifier = { #Faith compatibility
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value > faith_fully_accepted_level
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_astray_level
							}
						}
					}
					subtract = 20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 60
				}
			}
			desc = MARRY_DIFFERENT_FAITH_REASON
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
	  	  	add = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
				multiply = 10
	  		}
			desc = offer_vassalization_interaction_aibehavior_power_tt
		}
		# Recipient is a Claimant to Actor's titles.
		modifier = {
			scope:recipient = {
				any_claim = {
					holder = scope:actor
				}
			}
			add = {
				value = -200
				if = {
					limit = {
						NOT = {
							scope:recipient.house = scope:actor.house
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						NOT = {
							scope:recipient.dynasty = scope:actor.dynasty
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						scope:recipient.dynasty = scope:actor.dynasty
						OR = {
							has_trait = bastard
							has_trait = legitimized_bastard
						}
					}
					multiply = 1.5
				}
				if = { # Primary heir will probably inherit the lands after the rulers death
					limit = {
						scope:recipient = { is_primary_heir_of = scope:actor }
					}
					divide = 4
				}
			}
			desc = IS_CLAIMANT_TO_ACTORS_TITLES
		}
		#Actor has claims on recipient's titles.
		modifier = {
			scope:actor = {
				any_claim = {
					holder = scope:recipient
				}
			}
			add = 25
			desc = IS_CLAIMANT_TO_RECIPIENT_TITLES
		}
		modifier = {
			scope:recipient = {
				NOT = {
					any_claim = {
						holder = scope:actor
					}
				}
			}
			scope:recipient.house = scope:actor.house
			add = 15
			desc = IS_SAME_HOUSE_REASON
		}
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = declared_war
				}
			}
			add = -100
			desc = DECLARED_WAR_REASON
		}

		modifier = { # 永久朝贡国
			desc = game_concept_permanent_trib
			scope:permanent_trib = yes
			add = -50
		}
	}
	##照抄原版结束
	ai_potential = {
		is_at_war = no
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		max = 30
	}
	
	ai_frequency = 72
	
	ai_will_do = {
		base = -25
		
		modifier = {
	  	  	add = {
				value = scope:recipient.max_military_strength
				divide = { value = scope:actor.max_military_strength min = 1 }
				subtract = 1.5
				multiply = 50
	  		}
		}
		modifier = {
			scope:actor = {
				primary_title.tier = tier_kingdom
			}
			add = 20
		}
		modifier = {
			scope:actor = {
				primary_title.tier = tier_empire
			}
			add = 30
		}
		modifier = {
			scope:actor = {
				has_realm_law = crown_authority_1
			}
			add = 5
		}
		modifier = {
			scope:actor = {
				has_realm_law = crown_authority_2
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				has_realm_law = crown_authority_3
			}
			add = 20
		}
		modifier = {
			scope:actor = {
				prestige_level > 3
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				dynasty.dynasty_prestige_level > 3
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				sub_realm_size > 40
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				diplomacy > 10
			}
			add = 10
		}
	}
	
}


bride_request_tribute_interaction = {#贿赂其成为朝贡国
	category = interaction_category_tribute
	icon = icon_liege
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_demand_tribute_with_wealth_offer_desc
	
	greeting = positive
	notification_text = TributeSystem_demand_tribute_with_wealth_offer_notification
	
	is_shown = {
		scope:actor = {
			TributeSystem_can_be_suzerain_of_trigger = { TRIBUTARY = scope:recipient }
		}
		scope:recipient = {
			TributeSystem_can_be_tributary_of_trigger = { SUZERAIN = scope:actor }
		}
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_oe_available = yes
		}
		
		scope:actor = {
			is_oe_available = yes
		}
		
		scope:recipient = { is_available_for_activity_trigger = yes }

		custom_description = {
			text = "TributeSystem_allegiance_demand_has_been_rejected"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = demand_tribute_refused_opinion
						target = scope:recipient
					}
				}
			}
		}
		
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = bride_request_tribute_interaction
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1007
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1008
			make_tributary = {
				TYPE = tributary_non_permanent
				TRIBUTARY = scope:recipient
				SUZERAIN = scope:actor
			}
			TributeSystem_pay_income_function_effect = {
				ACTOR = scope:actor
				TARGET = scope:recipient
				THRESHOLD = 10
				MONTHS = 24
			}
			stress_impact = {
				shy = minor_stress_impact_gain
			}

			if = {
				limit = { scope:hook = yes }
				use_hook = scope:recipient
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = TributeSystem.1009
		}
		scope:actor = {
			add_opinion = {
				modifier = demand_tribute_refused_opinion
				target = scope:recipient
			}
		}
	}

	auto_accept = yes

	ai_potential = {
		always = no
	}
	
	ai_will_do = {
		base = 0
	}
	
}

free_tributary_interaction = {#宗主国抛弃朝贡国
	category = interaction_category_tribute
	icon = icon_liege
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_suzerain_break_tribute_relation_desc
	
	greeting = positive
	notification_text = TributeSystem_suzerain_break_tribute_relation_notification
	
	is_shown = {
		scope:actor = { has_relation_tributary = scope:recipient }
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_oe_available = yes
		}
		
		scope:actor = {
			is_oe_available = yes
		}
		
		scope:recipient = { is_available_for_activity_trigger = yes }
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = free_tributary_interaction
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1010
		}
	}

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1011
			unset_tributary = {
				TRIBUTARY = scope:recipient
				#SUZERAIN = scope:actor 
			}

			stress_impact = {
				shy = minor_stress_impact_gain
			}
		}
	}

	auto_accept = yes

	ai_potential = {
		always = no
	}
	
	ai_will_do = {
		base = 0
	}
	
}


break_tributary_interaction = {#朝贡国提出终止朝贡
	category = interaction_category_tribute
	icon = icon_vassal
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_tributary_break_tribute_relation_desc
	
	greeting = positive
	notification_text = TributeSystem_tributary_break_tribute_relation_notification
	
	is_shown = {
		scope:actor = { has_relation_suzerain = scope:recipient }
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_oe_available = yes
		}

		scope:actor = {
			is_oe_available = yes
		}

		scope:recipient = { is_available_for_activity_trigger = yes }
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = break_tributary_interaction
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1013
		}
	}

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1014
			unset_tributary = {
				TRIBUTARY = scope:actor
				#SUZERAIN = var:my_suzerain
			}

			stress_impact = {
				shy = minor_stress_impact_gain
			}
		}
	}

	auto_accept = yes

	ai_potential = {
		always = no
	}
	
	ai_will_do = {
		base = 0
	}
	
}

###################
#进贡
###################






###################
# Demand Payment
# by Petter Vilberg
###################
demand_payment_interaction = {
	category = interaction_category_tribute

	auto_accept = yes
	use_diplomatic_range = yes
	icon = icon_liege
	desc = demand_payment_interaction_desc

	is_shown = {
		scope:actor = {
			OR = {
				has_perk = golden_obligations_perk
				AND = {
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_demand_payments_for_all
						is_secondary_character_involvement_either_trigger = {
							CHAR = scope:recipient
						}
					}
				}
			}
		}
		scope:recipient = {
			is_ai = yes
		}
		NOT = { scope:recipient = scope:actor }
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_physically_able_adult = yes
			NOT = {
				is_at_war_with = scope:recipient
			}
		}
		scope:recipient = {
			is_imprisoned = no
		}
		scope:recipient = {
			custom_description = {
				text = demand_payment_too_little_gold
				gold >= 1
			}
		}
	}

	is_valid = {
		scope:actor = {
			has_usable_hook = scope:recipient
		}
	}

	is_highlighted = {
		scope:actor = {
			has_usable_hook = scope:recipient
		}
	}

	on_accept = {
		if = {
			limit = {
				scope:recipient.gold < scope:recipient.golden_obligation_value
			}
			custom_tooltip = demand_payment_too_little_gold_tt
		}
		scope:actor = {
			send_interface_toast = {
				title = demand_payment_interaction_message
				left_icon = scope:recipient

				scope:actor = {
					use_hook = scope:recipient
				}
				scope:recipient = {
					if = {
						pay_short_term_gold = {
							target = scope:actor
							gold = golden_obligation_value
						}
						limit = {
							gold > golden_obligation_value
						}
					}
					else = {
						pay_short_term_gold = {
							target = scope:actor
							gold = {
								value = scope:recipient.gold
								floor = yes
							}
						}
					}
				}
			}
			stress_impact = {
				generous = medium_stress_impact_gain
			}
		}
	}
	
	ai_potential = {
		NOT = {
			has_trait = generous
		}
		OR = {
			ai_greed >= low_positive_ai_value
			is_at_war = yes
		}
	}
	
	ai_target_quick_trigger = {
		adult = yes
	}
	
	ai_targets = {
		ai_recipients = hooked_characters
	}
	
	ai_frequency = 36
	
	ai_will_do = {
		base = 100

		modifier = { #ai won't use the interaction if they'll get nothing out of it
			factor = 0
			scope:recipient.gold < 8
		}
		
		modifier = {
			factor = 0
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
	}
}


##################################################
# Purchase Truce
# by Ewan Cowhig Croft
##################################################

# Wars are expensive, so why not purchase a little peace preemptively?
purchase_truce_interaction = {
	interface_priority = 30
	category = interaction_category_diplomacy
	common_interaction = yes
	desc = purchase_truce_interaction_desc
	icon = icon_retreat

	greeting = positive
	notification_text = PURCHASE_TRUCE_NOTIFICATION
	popup_on_receive = yes
	ai_maybe = yes

	cooldown = { years = 5 }
	cooldown_against_recipient = { years = 10 }

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		# Scope:actor needs to either be involved in certain struggle types or else have a specific perk.
		scope:actor = {
			OR = {
				any_character_struggle = {
					involvement = involved
					has_struggle_phase_parameter = unlocks_truce_purchasing_interaction
				}
				has_perk = defensive_measures_perk
			}

			# if you are not independent you should not be able to purchase truce with other fellow vassals only
			trigger_if = {
				limit = { is_independent_ruler = no }
				top_liege = scope:recipient.top_liege
			}
		}
		# Scope:recipient must be landed, and neither over or under scope:actor.
		scope:recipient = {
			is_landed = yes
			NOR = {
				any_liege_or_above = { this = scope:actor }
				any_vassal_or_below = { this = scope:actor }
			}
		}
	}

	is_valid_showing_failures_only = {
		# Scope:actor must be an available (adult or child).
		scope:actor = { is_available = yes }
		# Scope:recipient must be at least available.
		scope:recipient = { is_available = yes }
		# Make sure that scope:actor is going into this with a clean, no-recent/active/forbidden hostilities mindset.
		scope:actor = {
			NOR = {
				# Involved characters can't be on opposite sides in an active war.
				is_at_war_with = scope:recipient
				# Allied characters aren't allowed to do this because it _should_ be redundant. Unless you're planning something. Which you shouldn't announce like that.
				is_allied_to = scope:recipient
				# And we should just disallow anyone who already has a truce with you, even though I guess you might technically want to replace it.
				any_truce_holder = { this = scope:recipient }
			}
		}
	}
	
	on_accept = {
		# Notifications with most effects.
		scope:actor = {
			send_interface_toast = {
				title = purchase_truce_interaction.accept.actor.tt
				left_icon = scope:recipient
				show_as_tooltip = {
					purchase_truce_interaction_work_out_truce_days_effect = { TARGET = scope:recipient }
				}
			}
			show_as_tooltip = { purchase_truce_interaction_work_out_purchase_cost_effect = yes }
			# Outside of the notification, since we'll send a separate one anyway, we want to point out the catalyst activation (if relevant).
			show_as_tooltip = { purchase_truce_interaction_activate_catalyst_effect = yes }
		}
		scope:recipient = {
			send_interface_toast = {
				title = purchase_truce_interaction.accept.recipient.tt
				left_icon = scope:actor
				show_as_tooltip = {
					purchase_truce_interaction_work_out_truce_days_effect = { TARGET = scope:actor }
				}
			}
		}
		# Then we apply the actual truce.
		hidden_effect = {
			scope:actor = {
				purchase_truce_interaction_work_out_truce_days_effect = { TARGET = scope:recipient }
				purchase_truce_interaction_activate_catalyst_effect = yes
			}
			purchase_truce_interaction_work_out_purchase_cost_effect = yes
		}
	}
	
	on_decline = {
		# Scope:actor gains some stress over the whole ordeal.
		scope:actor = {
			send_interface_toast = {
				title = purchase_truce_interaction.decline.actor.tt
				left_icon = scope:recipient
				add_stress = minor_stress_gain
			}
		}
		# Scope:actor loses opinion of scope:recipient.
		scope:recipient = {
			send_interface_toast = {
				title = purchase_truce_interaction.decline.recipient.tt
				left_icon = scope:actor
				reverse_add_opinion = {
					target = scope:actor
					modifier = warmonger_opinion
				}
			}
		}
	}

	# Send Options
	## Small Sum
	send_option = {
		is_shown = { always = yes }
		flag = pt_sum_small
		localization = "PT_SUM_SMALL"
	}
	## Medium Sum
	send_option = {
		is_shown = {
			# We use the most expensive of scope:actor or scope:recipient's income, so we check both.
			scope:actor = {
				can_make_expensive_purchase_trigger = { PRICE = scope:actor.purchase_truce_interaction_medium_sum }
				can_make_expensive_purchase_trigger = { PRICE = scope:recipient.purchase_truce_interaction_medium_sum }
			}
		}
		flag = pt_sum_medium
		starts_enabled = { always = yes }
		localization = "PT_SUM_MEDIUM"
	}
	## Large Sum
	send_option = {
		is_shown = {
			# We use the most expensive of scope:actor or scope:recipient's income, so we check both.
			scope:actor = {
				can_make_expensive_purchase_trigger = { PRICE = scope:actor.purchase_truce_interaction_major_sum }
				can_make_expensive_purchase_trigger = { PRICE = scope:recipient.purchase_truce_interaction_major_sum }
			}
		}
		flag = pt_sum_large
		localization = "PT_SUM_LARGE"
	}

	# AI
	## Standard Acceptance stuff
	ai_accept = {
		# Try to make it 0 for most interactions.
		base = 0

		# Struggle
		modifier = {
			trigger_if = {
				limit = {
					scope:recipient = {
						any_character_struggle = {
							involvement = involved
						}
					}
					scope:actor = {
						any_character_struggle = {
							involvement = involved
						}
					}
				}
			}
			trigger_else = {
				always = no
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_sign_truce_outside_war
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -50
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_sign_truce_outside_war
							}
						}
					}
					add = 100
				}
			}
			desc = AI_STRUGGLE_INTENT
		}

		# Factor up or down based on the sum offered.
		## Small.
		modifier = {
			add = -10
			always = scope:pt_sum_small
			desc = PT_AMOUNT_OF_GOLD_OFFERED
		}
		## Medium.
		modifier = {
			add = 25
			always = scope:pt_sum_medium
			desc = PT_AMOUNT_OF_GOLD_OFFERED
		}
		## Large.
		modifier = {
			add = 75
			always = scope:pt_sum_large
			desc = PT_AMOUNT_OF_GOLD_OFFERED
		}
		## Plus a bit of base-line acceptance if the AI's coffers are currently pretty anaemic.
		modifier = {
			add = 30
			gold <= scope:recipient.yearly_character_income
			desc = PT_COULD_USE_SOME_POCKET_MONEY
		}
		# AI take opinion into account, but reduced so they'll at least occasionally accept from folks they dislike.
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		# Greedy AI like gold.
		modifier = {
			add = {
				value = ai_greed
				multiply = 2
			}
			ai_greed >= 1
			desc = AI_VALUE_MODIFIER_GREED
		}
		# Boldness always plays a factor.
		modifier = {
			add = {
				value = ai_boldness
				multiply = -0.5
			}
			NOT = { ai_boldness = 0 }
			desc = AI_VALUE_MODIFIER_BOLDNESS
		}
		# Ambitious AI like freedom.
		modifier = {
			add = -50
			has_trait = ambitious
			desc = PT_AI_LIKES_FREEDOM_TO_WAR_REASON
		}
		# AI who are in debt will take whatever windfalls they can.
		modifier = {
			add = {
				value = debt_level
				# Our first rank is 0, so we add one to always get a positive number.
				add = 1
				multiply = 10
			}
			debt_level >= 0
			desc = PT_AI_IS_IN_DEBT
		}
		# Pacifist AI are happy to avoid war.
		modifier = {
			add = 25
			faith = { has_doctrine_parameter = pacifist_opinion_active }
			desc = PT_AI_IS_PACIFIST_FAITH
		}
		modifier = {
			add = 25
			culture = { has_cultural_parameter = reduced_cost_for_conversion_to_pacifist_faith }
			desc = PT_AI_IS_PACIFIST_CULTURE
		}
		# War likeliness.
		## This is primarily intended to mitigate conquest, invasion, and religious CBs, so we don't account for them.
		## Scope:recipient has some claim to scope:actor's lands.
		modifier = {
			add = -20
			any_claim = {
				count = 1
				exists = holder
				holder = scope:actor
			}
			desc = PT_AI_PERSONALLY_CLAIMS_YOUR_LAND
		}
		## Scope:recipient has decent claim to scope:actor's lands.
		modifier = {
			add = -40
			OR = {
				any_claim = {
					count >= 2
					exists = holder
					holder = scope:actor
				}
				any_claim = {
					count = 1
					exists = holder
					holder = scope:actor
					save_temporary_scope_as = claim_temp
					scope:recipient = { has_strong_claim_on = scope:claim_temp }
				}
			}
			desc = PT_AI_PERSONALLY_CLAIMS_YOUR_LAND
		}
		## Scope:recipient has strong claim to scope:actor's lands.
		modifier = {
			add = -60
			any_claim = {
				count >= 2
				exists = holder
				holder = scope:actor
				save_temporary_scope_as = claim_temp
				scope:recipient = { has_strong_claim_on = scope:claim_temp }
			}
			desc = PT_AI_PERSONALLY_CLAIMS_YOUR_LAND
		}
		## Scope:recipient can de jure grab your land.
		### Dukes don't take much.
		modifier = {
			add = -30
			highest_held_title_tier = tier_duchy
			purchase_truce_interaction_recipient_can_de_jure_war_actor_trigger = yes
			scope:actor = {
				any_sub_realm_county = {
					count >= 3
					any_this_title_or_de_jure_above = { holder = scope:actor }
				}
			}
			desc = PT_AI_DE_JURE_CLAIMS_YOUR_LAND
		}
		### Kings need a lot more.
		modifier = {
			add = -30
			highest_held_title_tier = tier_kingdom
			purchase_truce_interaction_recipient_can_de_jure_war_actor_trigger = yes
			scope:actor = {
				any_sub_realm_county = {
					count >= 10
					any_this_title_or_de_jure_above = { holder = scope:actor }
				}
			}
			desc = PT_AI_DE_JURE_CLAIMS_YOUR_LAND
		}
		### Emperors take quite a bit to get fussed.
		modifier = {
			add = -30
			highest_held_title_tier = tier_empire
			purchase_truce_interaction_recipient_can_de_jure_war_actor_trigger = yes
			scope:actor = {
				any_sub_realm_county = {
					count >= 20
					any_this_title_or_de_jure_above = { holder = scope:actor }
				}
			}
			desc = PT_AI_DE_JURE_CLAIMS_YOUR_LAND
		}
		# Relative power.
		## Scope:actor has far fewer levies than scope:recipient.
		modifier = {
			add = -30
			scope:actor.max_military_strength <= scope:recipient.purchase_truce_interaction_recipient_far_weaker_value
			desc = PT_AI_RECIPIENT_IS_MUCH_STRONGER
		}
		## Scope:actor has fewer levies than scope:recipient.
		modifier = {
			add = -10
			scope:actor.max_military_strength > scope:recipient.purchase_truce_interaction_recipient_far_weaker_value
			scope:actor.max_military_strength <= scope:recipient.purchase_truce_interaction_recipient_somewhat_weaker_value
			desc = PT_AI_RECIPIENT_IS_SOMEWHAT_STRONGER
		}
		## Scope:actor has roughly equal levies with scope:recipient.
		modifier = {
			add = 10
			scope:actor.max_military_strength > scope:recipient.purchase_truce_interaction_recipient_somewhat_weaker_value
			scope:actor.max_military_strength <= scope:recipient.purchase_truce_interaction_recipient_somewhat_stronger_value
			desc = PT_AI_RECIPIENT_IS_ROUGHLY_EQUAL
		}
		## Scope:actor has more levies than scope:recipient.
		modifier = {
			add = 25
			scope:actor.max_military_strength > scope:recipient.purchase_truce_interaction_recipient_somewhat_stronger_value
			scope:actor.max_military_strength <= scope:recipient.purchase_truce_interaction_recipient_far_stronger_value
			desc = PT_AI_RECIPIENT_IS_SOMEWHAT_WEAKER
		}
		## Scope:actor has far more levies than scope:recipient.
		modifier = {
			add = 50
			scope:actor.max_military_strength > scope:recipient.purchase_truce_interaction_recipient_far_stronger_value
			desc = PT_AI_RECIPIENT_IS_MUCH_WEAKER
		}

		# Struggle
		modifier = {
			desc = AI_STRUGGLE_INTENT
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_sign_truce_outside_war
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -50
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_sign_truce_outside_war
							}
						}
					}
					add = 100
				}
			}
		}
	}
	## Performance-enhancement	
	ai_potential = {
		is_landed = yes
		is_at_war = no
		is_imprisoned = no
		# Matches the regular minimum triggers.
		OR = {
			any_character_struggle = { involvement = involved }
			has_perk = defensive_measures_perk
		}
		# Might actually be wurf evaluating the costs.
		can_make_expensive_purchase_trigger = { PRICE = purchase_truce_interaction_small_sum }
	}
	ai_target_quick_trigger = { adult = yes }
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 10
	}
	## Frequency
	ai_frequency = 60
	ai_will_do = {
		base = 0

		# Some personalities & traits just don't want to fight.
		## Cravens (who aren't also ambitious).
		modifier = {
			add = 25
			has_trait = craven
			NOT = { has_trait = ambitious }
		}
		## Those with chronically low boldness (who aren't also ambitious).
		modifier = {
			add = 25
			ai_boldness <= very_high_negative_ai_value
			NOT = { has_trait = ambitious }
		}
		## Pacifists.
		modifier = {
			add = 25
			faith = { has_doctrine_parameter = pacifist_opinion_active }
		}
		modifier = {
			add = 25
			culture = { has_cultural_parameter = reduced_cost_for_conversion_to_pacifist_faith }
		}
		## Wrathful or ambitious characters don't like to bother.
		modifier = {
			add = -25
			has_trait = ambitious
		}
		modifier  = {
			add = -25
			has_trait = wrathful
		}
		## Arbitrary characters don't get truces to begin with.
		modifier = {
			add = -50
			has_trait = arbitrary
		}
		## We deliberately avoid warlike faiths *not* doing it; there's plenty of examples of such bought truces amongst these faiths, so we let them keep at it if they match other criteria.
		# Various gradients of having money to burn.
		## You've got a goodly amount stashed away.
		modifier = {
			add = 50
			can_make_expensive_purchase_trigger = { PRICE = purchase_truce_interaction_medium_sum }
		}
		## You're somewhat loaded.
		modifier = {
			add = 50
			can_make_expensive_purchase_trigger = { PRICE = purchase_truce_interaction_major_sum }
		}
		## You're absolutely loaded.
		modifier = {
			add = 50
			can_make_expensive_purchase_trigger = { PRICE = purchase_truce_interaction_massive_sum }
		}
		# Force checks.
		## Try to buy truces from somewhat stronger realms...
		modifier = {
			add = 50
			scope:recipient.max_military_strength >= scope:actor.purchase_truce_interaction_recipient_somewhat_stronger_value
		}
		## ... and much stronger realms.
		modifier = {
			add = 50
			scope:recipient.max_military_strength >= scope:actor.purchase_truce_interaction_recipient_far_stronger_value
		}

		# Struggle
		modifier = {
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_sign_truce_outside_war
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -50
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_sign_truce_outside_war
							}
						}
					}
					add = 100
				}
			}
		}
		# Finally, calculate factors.
		## Only buy truces from weaker/roughly-equal realms if you're craven have been at war forever.
		modifier = {
			factor = 0
			max_military_strength <= scope:actor.purchase_truce_interaction_recipient_somewhat_weaker_value
			NOR = {
				has_trait = craven
				days_of_continuous_war <= 3650
			}
		}
		## Never buy a truce from someone who actually can't declare war on you.
		modifier = {
			factor = 0
			scope:recipient = {
				NOT = { has_any_cb_on = scope:actor }
			}
		}
		## Don't buy truces from people who are likely going to be dead soon, or if you yourself will die soon, since they'll be wasted.
		modifier = {
			factor = 0
			OR = {
				health <= poor_health
				scope:recipient = { health <= poor_health }
			}
		}
	}
}